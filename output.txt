This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, line numbers have been added.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*
- Files matching these patterns are excluded: **/*.log, **/uv.lock, **/package-lock.json, **/.env, **/Cargo.lock, **/node_modules, **/target, **/dist, **/build, **/output.txt, **/yarn.lock, **/uv.lock, **/package-lock.json, **/.env, **/Cargo.lock, **/.notes, **/node_modules, **/target, **/dist, **/build, **/output.txt, **/yarn.lock
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app/
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    avatar.tsx
    badge.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    context-menu.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    menubar.tsx
    navigation-menu.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    sidebar.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
    use-mobile.tsx
    use-toast.ts
  data-exposure-metrics.tsx
  platform-settings.tsx
  privacy-dashboard.tsx
  privacy-recommendations.tsx
  privacy-score.tsx
  theme-provider.tsx
hooks/
  use-mobile.tsx
  use-toast.ts
lib/
  utils.ts
public/
  placeholder-logo.svg
  placeholder.svg
styles/
  globals.css
.gitignore
components.json
mise.toml
next.config.mjs
package.json
postcss.config.mjs
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/globals.css">
 1: @tailwind base;
 2: @tailwind components;
 3: @tailwind utilities;
 4: body {
 5:   font-family: Arial, Helvetica, sans-serif;
 6: }
 7: @layer utilities {
 8:   .text-balance {
 9:     text-wrap: balance;
10:   }
11: }
12: @layer base {
13:   :root {
14:     --background: 0 0% 100%;
15:     --foreground: 0 0% 3.9%;
16:     --card: 0 0% 100%;
17:     --card-foreground: 0 0% 3.9%;
18:     --popover: 0 0% 100%;
19:     --popover-foreground: 0 0% 3.9%;
20:     --primary: 0 0% 9%;
21:     --primary-foreground: 0 0% 98%;
22:     --secondary: 0 0% 96.1%;
23:     --secondary-foreground: 0 0% 9%;
24:     --muted: 0 0% 96.1%;
25:     --muted-foreground: 0 0% 45.1%;
26:     --accent: 0 0% 96.1%;
27:     --accent-foreground: 0 0% 9%;
28:     --destructive: 0 84.2% 60.2%;
29:     --destructive-foreground: 0 0% 98%;
30:     --border: 0 0% 89.8%;
31:     --input: 0 0% 89.8%;
32:     --ring: 0 0% 3.9%;
33:     --chart-1: 12 76% 61%;
34:     --chart-2: 173 58% 39%;
35:     --chart-3: 197 37% 24%;
36:     --chart-4: 43 74% 66%;
37:     --chart-5: 27 87% 67%;
38:     --radius: 0.5rem;
39:     --sidebar-background: 0 0% 98%;
40:     --sidebar-foreground: 240 5.3% 26.1%;
41:     --sidebar-primary: 240 5.9% 10%;
42:     --sidebar-primary-foreground: 0 0% 98%;
43:     --sidebar-accent: 240 4.8% 95.9%;
44:     --sidebar-accent-foreground: 240 5.9% 10%;
45:     --sidebar-border: 220 13% 91%;
46:     --sidebar-ring: 217.2 91.2% 59.8%;
47:   }
48:   .dark {
49:     --background: 0 0% 3.9%;
50:     --foreground: 0 0% 98%;
51:     --card: 0 0% 3.9%;
52:     --card-foreground: 0 0% 98%;
53:     --popover: 0 0% 3.9%;
54:     --popover-foreground: 0 0% 98%;
55:     --primary: 0 0% 98%;
56:     --primary-foreground: 0 0% 9%;
57:     --secondary: 0 0% 14.9%;
58:     --secondary-foreground: 0 0% 98%;
59:     --muted: 0 0% 14.9%;
60:     --muted-foreground: 0 0% 63.9%;
61:     --accent: 0 0% 14.9%;
62:     --accent-foreground: 0 0% 98%;
63:     --destructive: 0 62.8% 30.6%;
64:     --destructive-foreground: 0 0% 98%;
65:     --border: 0 0% 14.9%;
66:     --input: 0 0% 14.9%;
67:     --ring: 0 0% 83.1%;
68:     --chart-1: 220 70% 50%;
69:     --chart-2: 160 60% 45%;
70:     --chart-3: 30 80% 55%;
71:     --chart-4: 280 65% 60%;
72:     --chart-5: 340 75% 55%;
73:     --sidebar-background: 240 5.9% 10%;
74:     --sidebar-foreground: 240 4.8% 95.9%;
75:     --sidebar-primary: 224.3 76.3% 48%;
76:     --sidebar-primary-foreground: 0 0% 100%;
77:     --sidebar-accent: 240 3.7% 15.9%;
78:     --sidebar-accent-foreground: 240 4.8% 95.9%;
79:     --sidebar-border: 240 3.7% 15.9%;
80:     --sidebar-ring: 217.2 91.2% 59.8%;
81:   }
82: }
83: @layer base {
84:   * {
85:     @apply border-border;
86:   }
87:   body {
88:     @apply bg-background text-foreground;
89:   }
90: }
</file>

<file path="app/layout.tsx">
 1: import type React from "react"
 2: import "@/app/globals.css"
 3: import { ThemeProvider } from "@/components/theme-provider"
 4: export const metadata = {
 5:   title: "Social Media Privacy Report",
 6:   description: "Review your privacy settings and data exposure across social media platforms",
 7:     generator: 'v0.dev'
 8: }
 9: export default function RootLayout({
10:   children,
11: }: {
12:   children: React.ReactNode
13: }) {
14:   return (
15:     <html lang="en">
16:       <body>
17:         <ThemeProvider attribute="class" defaultTheme="light" enableSystem disableTransitionOnChange>
18:           {children}
19:         </ThemeProvider>
20:       </body>
21:     </html>
22:   )
23: }
</file>

<file path="app/page.tsx">
 1: import PrivacyDashboard from "@/components/privacy-dashboard"
 2: export default function Home() {
 3:   return (
 4:     <main className="min-h-screen bg-gray-50 p-4 md:p-8">
 5:       <div className="mx-auto max-w-7xl">
 6:         <h1 className="mb-6 text-3xl font-bold tracking-tight">Social Media Privacy Report</h1>
 7:         <p className="mb-8 text-muted-foreground">
 8:           Review and analyze your privacy settings and data exposure across social media platforms
 9:         </p>
10:         <PrivacyDashboard />
11:       </div>
12:     </main>
13:   )
14: }
</file>

<file path="components/ui/accordion.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as AccordionPrimitive from "@radix-ui/react-accordion"
 4: import { ChevronDown } from "lucide-react"
 5: import { cn } from "@/lib/utils"
 6: const Accordion = AccordionPrimitive.Root
 7: const AccordionItem = React.forwardRef<
 8:   React.ElementRef<typeof AccordionPrimitive.Item>,
 9:   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
10: >(({ className, ...props }, ref) => (
11:   <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
12: ))
13: AccordionItem.displayName = "AccordionItem"
14: const AccordionTrigger = React.forwardRef<
15:   React.ElementRef<typeof AccordionPrimitive.Trigger>,
16:   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
17: >(({ className, children, ...props }, ref) => (
18:   <AccordionPrimitive.Header className="flex">
19:     <AccordionPrimitive.Trigger
20:       ref={ref}
21:       className={cn(
22:         "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
23:         className,
24:       )}
25:       {...props}
26:     >
27:       {children}
28:       <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
29:     </AccordionPrimitive.Trigger>
30:   </AccordionPrimitive.Header>
31: ))
32: AccordionTrigger.displayName = "AccordionTrigger"
33: const AccordionContent = React.forwardRef<
34:   React.ElementRef<typeof AccordionPrimitive.Content>,
35:   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
36: >(({ className, children, ...props }, ref) => (
37:   <AccordionPrimitive.Content
38:     ref={ref}
39:     className={cn(
40:       "overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
41:       className,
42:     )}
43:     {...props}
44:   >
45:     <div className="pb-4 pt-0">{children}</div>
46:   </AccordionPrimitive.Content>
47: ))
48: AccordionContent.displayName = "AccordionContent"
49: export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="components/ui/alert-dialog.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
  4: import { cn } from "@/lib/utils"
  5: import { buttonVariants } from "@/components/ui/button"
  6: const AlertDialog = AlertDialogPrimitive.Root
  7: const AlertDialogTrigger = AlertDialogPrimitive.Trigger
  8: const AlertDialogPortal = AlertDialogPrimitive.Portal
  9: const AlertDialogOverlay = React.forwardRef<
 10:   React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
 11:   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
 12: >(({ className, ...props }, ref) => (
 13:   <AlertDialogPrimitive.Overlay
 14:     className={cn(
 15:       "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
 16:       className
 17:     )}
 18:     {...props}
 19:     ref={ref}
 20:   />
 21: ))
 22: AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName
 23: const AlertDialogContent = React.forwardRef<
 24:   React.ElementRef<typeof AlertDialogPrimitive.Content>,
 25:   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
 26: >(({ className, ...props }, ref) => (
 27:   <AlertDialogPortal>
 28:     <AlertDialogOverlay />
 29:     <AlertDialogPrimitive.Content
 30:       ref={ref}
 31:       className={cn(
 32:         "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
 33:         className
 34:       )}
 35:       {...props}
 36:     />
 37:   </AlertDialogPortal>
 38: ))
 39: AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName
 40: const AlertDialogHeader = ({
 41:   className,
 42:   ...props
 43: }: React.HTMLAttributes<HTMLDivElement>) => (
 44:   <div
 45:     className={cn(
 46:       "flex flex-col space-y-2 text-center sm:text-left",
 47:       className
 48:     )}
 49:     {...props}
 50:   />
 51: )
 52: AlertDialogHeader.displayName = "AlertDialogHeader"
 53: const AlertDialogFooter = ({
 54:   className,
 55:   ...props
 56: }: React.HTMLAttributes<HTMLDivElement>) => (
 57:   <div
 58:     className={cn(
 59:       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
 60:       className
 61:     )}
 62:     {...props}
 63:   />
 64: )
 65: AlertDialogFooter.displayName = "AlertDialogFooter"
 66: const AlertDialogTitle = React.forwardRef<
 67:   React.ElementRef<typeof AlertDialogPrimitive.Title>,
 68:   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
 69: >(({ className, ...props }, ref) => (
 70:   <AlertDialogPrimitive.Title
 71:     ref={ref}
 72:     className={cn("text-lg font-semibold", className)}
 73:     {...props}
 74:   />
 75: ))
 76: AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName
 77: const AlertDialogDescription = React.forwardRef<
 78:   React.ElementRef<typeof AlertDialogPrimitive.Description>,
 79:   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
 80: >(({ className, ...props }, ref) => (
 81:   <AlertDialogPrimitive.Description
 82:     ref={ref}
 83:     className={cn("text-sm text-muted-foreground", className)}
 84:     {...props}
 85:   />
 86: ))
 87: AlertDialogDescription.displayName =
 88:   AlertDialogPrimitive.Description.displayName
 89: const AlertDialogAction = React.forwardRef<
 90:   React.ElementRef<typeof AlertDialogPrimitive.Action>,
 91:   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
 92: >(({ className, ...props }, ref) => (
 93:   <AlertDialogPrimitive.Action
 94:     ref={ref}
 95:     className={cn(buttonVariants(), className)}
 96:     {...props}
 97:   />
 98: ))
 99: AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName
100: const AlertDialogCancel = React.forwardRef<
101:   React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
102:   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
103: >(({ className, ...props }, ref) => (
104:   <AlertDialogPrimitive.Cancel
105:     ref={ref}
106:     className={cn(
107:       buttonVariants({ variant: "outline" }),
108:       "mt-2 sm:mt-0",
109:       className
110:     )}
111:     {...props}
112:   />
113: ))
114: AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName
115: export {
116:   AlertDialog,
117:   AlertDialogPortal,
118:   AlertDialogOverlay,
119:   AlertDialogTrigger,
120:   AlertDialogContent,
121:   AlertDialogHeader,
122:   AlertDialogFooter,
123:   AlertDialogTitle,
124:   AlertDialogDescription,
125:   AlertDialogAction,
126:   AlertDialogCancel,
127: }
</file>

<file path="components/ui/alert.tsx">
 1: import * as React from "react"
 2: import { cva, type VariantProps } from "class-variance-authority"
 3: import { cn } from "@/lib/utils"
 4: const alertVariants = cva(
 5:   "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
 6:   {
 7:     variants: {
 8:       variant: {
 9:         default: "bg-background text-foreground",
10:         destructive:
11:           "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
12:       },
13:     },
14:     defaultVariants: {
15:       variant: "default",
16:     },
17:   }
18: )
19: const Alert = React.forwardRef<
20:   HTMLDivElement,
21:   React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
22: >(({ className, variant, ...props }, ref) => (
23:   <div
24:     ref={ref}
25:     role="alert"
26:     className={cn(alertVariants({ variant }), className)}
27:     {...props}
28:   />
29: ))
30: Alert.displayName = "Alert"
31: const AlertTitle = React.forwardRef<
32:   HTMLParagraphElement,
33:   React.HTMLAttributes<HTMLHeadingElement>
34: >(({ className, ...props }, ref) => (
35:   <h5
36:     ref={ref}
37:     className={cn("mb-1 font-medium leading-none tracking-tight", className)}
38:     {...props}
39:   />
40: ))
41: AlertTitle.displayName = "AlertTitle"
42: const AlertDescription = React.forwardRef<
43:   HTMLParagraphElement,
44:   React.HTMLAttributes<HTMLParagraphElement>
45: >(({ className, ...props }, ref) => (
46:   <div
47:     ref={ref}
48:     className={cn("text-sm [&_p]:leading-relaxed", className)}
49:     {...props}
50:   />
51: ))
52: AlertDescription.displayName = "AlertDescription"
53: export { Alert, AlertTitle, AlertDescription }
</file>

<file path="components/ui/aspect-ratio.tsx">
1: "use client"
2: import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"
3: const AspectRatio = AspectRatioPrimitive.Root
4: export { AspectRatio }
</file>

<file path="components/ui/avatar.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as AvatarPrimitive from "@radix-ui/react-avatar"
 4: import { cn } from "@/lib/utils"
 5: const Avatar = React.forwardRef<
 6:   React.ElementRef<typeof AvatarPrimitive.Root>,
 7:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
 8: >(({ className, ...props }, ref) => (
 9:   <AvatarPrimitive.Root
10:     ref={ref}
11:     className={cn(
12:       "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
13:       className
14:     )}
15:     {...props}
16:   />
17: ))
18: Avatar.displayName = AvatarPrimitive.Root.displayName
19: const AvatarImage = React.forwardRef<
20:   React.ElementRef<typeof AvatarPrimitive.Image>,
21:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
22: >(({ className, ...props }, ref) => (
23:   <AvatarPrimitive.Image
24:     ref={ref}
25:     className={cn("aspect-square h-full w-full", className)}
26:     {...props}
27:   />
28: ))
29: AvatarImage.displayName = AvatarPrimitive.Image.displayName
30: const AvatarFallback = React.forwardRef<
31:   React.ElementRef<typeof AvatarPrimitive.Fallback>,
32:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
33: >(({ className, ...props }, ref) => (
34:   <AvatarPrimitive.Fallback
35:     ref={ref}
36:     className={cn(
37:       "flex h-full w-full items-center justify-center rounded-full bg-muted",
38:       className
39:     )}
40:     {...props}
41:   />
42: ))
43: AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName
44: export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="components/ui/badge.tsx">
 1: import type * as React from "react"
 2: import { cva, type VariantProps } from "class-variance-authority"
 3: import { cn } from "@/lib/utils"
 4: const badgeVariants = cva(
 5:   "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
 6:   {
 7:     variants: {
 8:       variant: {
 9:         default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
10:         secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
11:         destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
12:         outline: "text-foreground",
13:       },
14:     },
15:     defaultVariants: {
16:       variant: "default",
17:     },
18:   },
19: )
20: export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}
21: function Badge({ className, variant, ...props }: BadgeProps) {
22:   return <div className={cn(badgeVariants({ variant }), className)} {...props} />
23: }
24: export { Badge, badgeVariants }
</file>

<file path="components/ui/breadcrumb.tsx">
  1: import * as React from "react"
  2: import { Slot } from "@radix-ui/react-slot"
  3: import { ChevronRight, MoreHorizontal } from "lucide-react"
  4: import { cn } from "@/lib/utils"
  5: const Breadcrumb = React.forwardRef<
  6:   HTMLElement,
  7:   React.ComponentPropsWithoutRef<"nav"> & {
  8:     separator?: React.ReactNode
  9:   }
 10: >(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
 11: Breadcrumb.displayName = "Breadcrumb"
 12: const BreadcrumbList = React.forwardRef<
 13:   HTMLOListElement,
 14:   React.ComponentPropsWithoutRef<"ol">
 15: >(({ className, ...props }, ref) => (
 16:   <ol
 17:     ref={ref}
 18:     className={cn(
 19:       "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
 20:       className
 21:     )}
 22:     {...props}
 23:   />
 24: ))
 25: BreadcrumbList.displayName = "BreadcrumbList"
 26: const BreadcrumbItem = React.forwardRef<
 27:   HTMLLIElement,
 28:   React.ComponentPropsWithoutRef<"li">
 29: >(({ className, ...props }, ref) => (
 30:   <li
 31:     ref={ref}
 32:     className={cn("inline-flex items-center gap-1.5", className)}
 33:     {...props}
 34:   />
 35: ))
 36: BreadcrumbItem.displayName = "BreadcrumbItem"
 37: const BreadcrumbLink = React.forwardRef<
 38:   HTMLAnchorElement,
 39:   React.ComponentPropsWithoutRef<"a"> & {
 40:     asChild?: boolean
 41:   }
 42: >(({ asChild, className, ...props }, ref) => {
 43:   const Comp = asChild ? Slot : "a"
 44:   return (
 45:     <Comp
 46:       ref={ref}
 47:       className={cn("transition-colors hover:text-foreground", className)}
 48:       {...props}
 49:     />
 50:   )
 51: })
 52: BreadcrumbLink.displayName = "BreadcrumbLink"
 53: const BreadcrumbPage = React.forwardRef<
 54:   HTMLSpanElement,
 55:   React.ComponentPropsWithoutRef<"span">
 56: >(({ className, ...props }, ref) => (
 57:   <span
 58:     ref={ref}
 59:     role="link"
 60:     aria-disabled="true"
 61:     aria-current="page"
 62:     className={cn("font-normal text-foreground", className)}
 63:     {...props}
 64:   />
 65: ))
 66: BreadcrumbPage.displayName = "BreadcrumbPage"
 67: const BreadcrumbSeparator = ({
 68:   children,
 69:   className,
 70:   ...props
 71: }: React.ComponentProps<"li">) => (
 72:   <li
 73:     role="presentation"
 74:     aria-hidden="true"
 75:     className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
 76:     {...props}
 77:   >
 78:     {children ?? <ChevronRight />}
 79:   </li>
 80: )
 81: BreadcrumbSeparator.displayName = "BreadcrumbSeparator"
 82: const BreadcrumbEllipsis = ({
 83:   className,
 84:   ...props
 85: }: React.ComponentProps<"span">) => (
 86:   <span
 87:     role="presentation"
 88:     aria-hidden="true"
 89:     className={cn("flex h-9 w-9 items-center justify-center", className)}
 90:     {...props}
 91:   >
 92:     <MoreHorizontal className="h-4 w-4" />
 93:     <span className="sr-only">More</span>
 94:   </span>
 95: )
 96: BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"
 97: export {
 98:   Breadcrumb,
 99:   BreadcrumbList,
100:   BreadcrumbItem,
101:   BreadcrumbLink,
102:   BreadcrumbPage,
103:   BreadcrumbSeparator,
104:   BreadcrumbEllipsis,
105: }
</file>

<file path="components/ui/button.tsx">
 1: import * as React from "react"
 2: import { Slot } from "@radix-ui/react-slot"
 3: import { cva, type VariantProps } from "class-variance-authority"
 4: import { cn } from "@/lib/utils"
 5: const buttonVariants = cva(
 6:   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
 7:   {
 8:     variants: {
 9:       variant: {
10:         default: "bg-primary text-primary-foreground hover:bg-primary/90",
11:         destructive:
12:           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
13:         outline:
14:           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
15:         secondary:
16:           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
17:         ghost: "hover:bg-accent hover:text-accent-foreground",
18:         link: "text-primary underline-offset-4 hover:underline",
19:       },
20:       size: {
21:         default: "h-10 px-4 py-2",
22:         sm: "h-9 rounded-md px-3",
23:         lg: "h-11 rounded-md px-8",
24:         icon: "h-10 w-10",
25:       },
26:     },
27:     defaultVariants: {
28:       variant: "default",
29:       size: "default",
30:     },
31:   }
32: )
33: export interface ButtonProps
34:   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
35:     VariantProps<typeof buttonVariants> {
36:   asChild?: boolean
37: }
38: const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
39:   ({ className, variant, size, asChild = false, ...props }, ref) => {
40:     const Comp = asChild ? Slot : "button"
41:     return (
42:       <Comp
43:         className={cn(buttonVariants({ variant, size, className }))}
44:         ref={ref}
45:         {...props}
46:       />
47:     )
48:   }
49: )
50: Button.displayName = "Button"
51: export { Button, buttonVariants }
</file>

<file path="components/ui/calendar.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import { ChevronLeft, ChevronRight } from "lucide-react"
 4: import { DayPicker } from "react-day-picker"
 5: import { cn } from "@/lib/utils"
 6: import { buttonVariants } from "@/components/ui/button"
 7: export type CalendarProps = React.ComponentProps<typeof DayPicker>
 8: function Calendar({
 9:   className,
10:   classNames,
11:   showOutsideDays = true,
12:   ...props
13: }: CalendarProps) {
14:   return (
15:     <DayPicker
16:       showOutsideDays={showOutsideDays}
17:       className={cn("p-3", className)}
18:       classNames={{
19:         months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
20:         month: "space-y-4",
21:         caption: "flex justify-center pt-1 relative items-center",
22:         caption_label: "text-sm font-medium",
23:         nav: "space-x-1 flex items-center",
24:         nav_button: cn(
25:           buttonVariants({ variant: "outline" }),
26:           "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
27:         ),
28:         nav_button_previous: "absolute left-1",
29:         nav_button_next: "absolute right-1",
30:         table: "w-full border-collapse space-y-1",
31:         head_row: "flex",
32:         head_cell:
33:           "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
34:         row: "flex w-full mt-2",
35:         cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
36:         day: cn(
37:           buttonVariants({ variant: "ghost" }),
38:           "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
39:         ),
40:         day_range_end: "day-range-end",
41:         day_selected:
42:           "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
43:         day_today: "bg-accent text-accent-foreground",
44:         day_outside:
45:           "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
46:         day_disabled: "text-muted-foreground opacity-50",
47:         day_range_middle:
48:           "aria-selected:bg-accent aria-selected:text-accent-foreground",
49:         day_hidden: "invisible",
50:         ...classNames,
51:       }}
52:       components={{
53:         IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
54:         IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
55:       }}
56:       {...props}
57:     />
58:   )
59: }
60: Calendar.displayName = "Calendar"
61: export { Calendar }
</file>

<file path="components/ui/card.tsx">
 1: import * as React from "react"
 2: import { cn } from "@/lib/utils"
 3: const Card = React.forwardRef<
 4:   HTMLDivElement,
 5:   React.HTMLAttributes<HTMLDivElement>
 6: >(({ className, ...props }, ref) => (
 7:   <div
 8:     ref={ref}
 9:     className={cn(
10:       "rounded-lg border bg-card text-card-foreground shadow-sm",
11:       className
12:     )}
13:     {...props}
14:   />
15: ))
16: Card.displayName = "Card"
17: const CardHeader = React.forwardRef<
18:   HTMLDivElement,
19:   React.HTMLAttributes<HTMLDivElement>
20: >(({ className, ...props }, ref) => (
21:   <div
22:     ref={ref}
23:     className={cn("flex flex-col space-y-1.5 p-6", className)}
24:     {...props}
25:   />
26: ))
27: CardHeader.displayName = "CardHeader"
28: const CardTitle = React.forwardRef<
29:   HTMLDivElement,
30:   React.HTMLAttributes<HTMLDivElement>
31: >(({ className, ...props }, ref) => (
32:   <div
33:     ref={ref}
34:     className={cn(
35:       "text-2xl font-semibold leading-none tracking-tight",
36:       className
37:     )}
38:     {...props}
39:   />
40: ))
41: CardTitle.displayName = "CardTitle"
42: const CardDescription = React.forwardRef<
43:   HTMLDivElement,
44:   React.HTMLAttributes<HTMLDivElement>
45: >(({ className, ...props }, ref) => (
46:   <div
47:     ref={ref}
48:     className={cn("text-sm text-muted-foreground", className)}
49:     {...props}
50:   />
51: ))
52: CardDescription.displayName = "CardDescription"
53: const CardContent = React.forwardRef<
54:   HTMLDivElement,
55:   React.HTMLAttributes<HTMLDivElement>
56: >(({ className, ...props }, ref) => (
57:   <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
58: ))
59: CardContent.displayName = "CardContent"
60: const CardFooter = React.forwardRef<
61:   HTMLDivElement,
62:   React.HTMLAttributes<HTMLDivElement>
63: >(({ className, ...props }, ref) => (
64:   <div
65:     ref={ref}
66:     className={cn("flex items-center p-6 pt-0", className)}
67:     {...props}
68:   />
69: ))
70: CardFooter.displayName = "CardFooter"
71: export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/carousel.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import useEmblaCarousel, {
  4:   type UseEmblaCarouselType,
  5: } from "embla-carousel-react"
  6: import { ArrowLeft, ArrowRight } from "lucide-react"
  7: import { cn } from "@/lib/utils"
  8: import { Button } from "@/components/ui/button"
  9: type CarouselApi = UseEmblaCarouselType[1]
 10: type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
 11: type CarouselOptions = UseCarouselParameters[0]
 12: type CarouselPlugin = UseCarouselParameters[1]
 13: type CarouselProps = {
 14:   opts?: CarouselOptions
 15:   plugins?: CarouselPlugin
 16:   orientation?: "horizontal" | "vertical"
 17:   setApi?: (api: CarouselApi) => void
 18: }
 19: type CarouselContextProps = {
 20:   carouselRef: ReturnType<typeof useEmblaCarousel>[0]
 21:   api: ReturnType<typeof useEmblaCarousel>[1]
 22:   scrollPrev: () => void
 23:   scrollNext: () => void
 24:   canScrollPrev: boolean
 25:   canScrollNext: boolean
 26: } & CarouselProps
 27: const CarouselContext = React.createContext<CarouselContextProps | null>(null)
 28: function useCarousel() {
 29:   const context = React.useContext(CarouselContext)
 30:   if (!context) {
 31:     throw new Error("useCarousel must be used within a <Carousel />")
 32:   }
 33:   return context
 34: }
 35: const Carousel = React.forwardRef<
 36:   HTMLDivElement,
 37:   React.HTMLAttributes<HTMLDivElement> & CarouselProps
 38: >(
 39:   (
 40:     {
 41:       orientation = "horizontal",
 42:       opts,
 43:       setApi,
 44:       plugins,
 45:       className,
 46:       children,
 47:       ...props
 48:     },
 49:     ref
 50:   ) => {
 51:     const [carouselRef, api] = useEmblaCarousel(
 52:       {
 53:         ...opts,
 54:         axis: orientation === "horizontal" ? "x" : "y",
 55:       },
 56:       plugins
 57:     )
 58:     const [canScrollPrev, setCanScrollPrev] = React.useState(false)
 59:     const [canScrollNext, setCanScrollNext] = React.useState(false)
 60:     const onSelect = React.useCallback((api: CarouselApi) => {
 61:       if (!api) {
 62:         return
 63:       }
 64:       setCanScrollPrev(api.canScrollPrev())
 65:       setCanScrollNext(api.canScrollNext())
 66:     }, [])
 67:     const scrollPrev = React.useCallback(() => {
 68:       api?.scrollPrev()
 69:     }, [api])
 70:     const scrollNext = React.useCallback(() => {
 71:       api?.scrollNext()
 72:     }, [api])
 73:     const handleKeyDown = React.useCallback(
 74:       (event: React.KeyboardEvent<HTMLDivElement>) => {
 75:         if (event.key === "ArrowLeft") {
 76:           event.preventDefault()
 77:           scrollPrev()
 78:         } else if (event.key === "ArrowRight") {
 79:           event.preventDefault()
 80:           scrollNext()
 81:         }
 82:       },
 83:       [scrollPrev, scrollNext]
 84:     )
 85:     React.useEffect(() => {
 86:       if (!api || !setApi) {
 87:         return
 88:       }
 89:       setApi(api)
 90:     }, [api, setApi])
 91:     React.useEffect(() => {
 92:       if (!api) {
 93:         return
 94:       }
 95:       onSelect(api)
 96:       api.on("reInit", onSelect)
 97:       api.on("select", onSelect)
 98:       return () => {
 99:         api?.off("select", onSelect)
100:       }
101:     }, [api, onSelect])
102:     return (
103:       <CarouselContext.Provider
104:         value={{
105:           carouselRef,
106:           api: api,
107:           opts,
108:           orientation:
109:             orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
110:           scrollPrev,
111:           scrollNext,
112:           canScrollPrev,
113:           canScrollNext,
114:         }}
115:       >
116:         <div
117:           ref={ref}
118:           onKeyDownCapture={handleKeyDown}
119:           className={cn("relative", className)}
120:           role="region"
121:           aria-roledescription="carousel"
122:           {...props}
123:         >
124:           {children}
125:         </div>
126:       </CarouselContext.Provider>
127:     )
128:   }
129: )
130: Carousel.displayName = "Carousel"
131: const CarouselContent = React.forwardRef<
132:   HTMLDivElement,
133:   React.HTMLAttributes<HTMLDivElement>
134: >(({ className, ...props }, ref) => {
135:   const { carouselRef, orientation } = useCarousel()
136:   return (
137:     <div ref={carouselRef} className="overflow-hidden">
138:       <div
139:         ref={ref}
140:         className={cn(
141:           "flex",
142:           orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
143:           className
144:         )}
145:         {...props}
146:       />
147:     </div>
148:   )
149: })
150: CarouselContent.displayName = "CarouselContent"
151: const CarouselItem = React.forwardRef<
152:   HTMLDivElement,
153:   React.HTMLAttributes<HTMLDivElement>
154: >(({ className, ...props }, ref) => {
155:   const { orientation } = useCarousel()
156:   return (
157:     <div
158:       ref={ref}
159:       role="group"
160:       aria-roledescription="slide"
161:       className={cn(
162:         "min-w-0 shrink-0 grow-0 basis-full",
163:         orientation === "horizontal" ? "pl-4" : "pt-4",
164:         className
165:       )}
166:       {...props}
167:     />
168:   )
169: })
170: CarouselItem.displayName = "CarouselItem"
171: const CarouselPrevious = React.forwardRef<
172:   HTMLButtonElement,
173:   React.ComponentProps<typeof Button>
174: >(({ className, variant = "outline", size = "icon", ...props }, ref) => {
175:   const { orientation, scrollPrev, canScrollPrev } = useCarousel()
176:   return (
177:     <Button
178:       ref={ref}
179:       variant={variant}
180:       size={size}
181:       className={cn(
182:         "absolute  h-8 w-8 rounded-full",
183:         orientation === "horizontal"
184:           ? "-left-12 top-1/2 -translate-y-1/2"
185:           : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
186:         className
187:       )}
188:       disabled={!canScrollPrev}
189:       onClick={scrollPrev}
190:       {...props}
191:     >
192:       <ArrowLeft className="h-4 w-4" />
193:       <span className="sr-only">Previous slide</span>
194:     </Button>
195:   )
196: })
197: CarouselPrevious.displayName = "CarouselPrevious"
198: const CarouselNext = React.forwardRef<
199:   HTMLButtonElement,
200:   React.ComponentProps<typeof Button>
201: >(({ className, variant = "outline", size = "icon", ...props }, ref) => {
202:   const { orientation, scrollNext, canScrollNext } = useCarousel()
203:   return (
204:     <Button
205:       ref={ref}
206:       variant={variant}
207:       size={size}
208:       className={cn(
209:         "absolute h-8 w-8 rounded-full",
210:         orientation === "horizontal"
211:           ? "-right-12 top-1/2 -translate-y-1/2"
212:           : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
213:         className
214:       )}
215:       disabled={!canScrollNext}
216:       onClick={scrollNext}
217:       {...props}
218:     >
219:       <ArrowRight className="h-4 w-4" />
220:       <span className="sr-only">Next slide</span>
221:     </Button>
222:   )
223: })
224: CarouselNext.displayName = "CarouselNext"
225: export {
226:   type CarouselApi,
227:   Carousel,
228:   CarouselContent,
229:   CarouselItem,
230:   CarouselPrevious,
231:   CarouselNext,
232: }
</file>

<file path="components/ui/chart.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as RechartsPrimitive from "recharts"
  4: import { cn } from "@/lib/utils"
  5: // Format: { THEME_NAME: CSS_SELECTOR }
  6: const THEMES = { light: "", dark: ".dark" } as const
  7: export type ChartConfig = {
  8:   [k in string]: {
  9:     label?: React.ReactNode
 10:     icon?: React.ComponentType
 11:   } & (
 12:     | { color?: string; theme?: never }
 13:     | { color?: never; theme: Record<keyof typeof THEMES, string> }
 14:   )
 15: }
 16: type ChartContextProps = {
 17:   config: ChartConfig
 18: }
 19: const ChartContext = React.createContext<ChartContextProps | null>(null)
 20: function useChart() {
 21:   const context = React.useContext(ChartContext)
 22:   if (!context) {
 23:     throw new Error("useChart must be used within a <ChartContainer />")
 24:   }
 25:   return context
 26: }
 27: const ChartContainer = React.forwardRef<
 28:   HTMLDivElement,
 29:   React.ComponentProps<"div"> & {
 30:     config: ChartConfig
 31:     children: React.ComponentProps<
 32:       typeof RechartsPrimitive.ResponsiveContainer
 33:     >["children"]
 34:   }
 35: >(({ id, className, children, config, ...props }, ref) => {
 36:   const uniqueId = React.useId()
 37:   const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`
 38:   return (
 39:     <ChartContext.Provider value={{ config }}>
 40:       <div
 41:         data-chart={chartId}
 42:         ref={ref}
 43:         className={cn(
 44:           "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
 45:           className
 46:         )}
 47:         {...props}
 48:       >
 49:         <ChartStyle id={chartId} config={config} />
 50:         <RechartsPrimitive.ResponsiveContainer>
 51:           {children}
 52:         </RechartsPrimitive.ResponsiveContainer>
 53:       </div>
 54:     </ChartContext.Provider>
 55:   )
 56: })
 57: ChartContainer.displayName = "Chart"
 58: const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
 59:   const colorConfig = Object.entries(config).filter(
 60:     ([_, config]) => config.theme || config.color
 61:   )
 62:   if (!colorConfig.length) {
 63:     return null
 64:   }
 65:   return (
 66:     <style
 67:       dangerouslySetInnerHTML={{
 68:         __html: Object.entries(THEMES)
 69:           .map(
 70:             ([theme, prefix]) => `
 71: ${prefix} [data-chart=${id}] {
 72: ${colorConfig
 73:   .map(([key, itemConfig]) => {
 74:     const color =
 75:       itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
 76:       itemConfig.color
 77:     return color ? `  --color-${key}: ${color};` : null
 78:   })
 79:   .join("\n")}
 80: }
 81: `
 82:           )
 83:           .join("\n"),
 84:       }}
 85:     />
 86:   )
 87: }
 88: const ChartTooltip = RechartsPrimitive.Tooltip
 89: const ChartTooltipContent = React.forwardRef<
 90:   HTMLDivElement,
 91:   React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
 92:     React.ComponentProps<"div"> & {
 93:       hideLabel?: boolean
 94:       hideIndicator?: boolean
 95:       indicator?: "line" | "dot" | "dashed"
 96:       nameKey?: string
 97:       labelKey?: string
 98:     }
 99: >(
100:   (
101:     {
102:       active,
103:       payload,
104:       className,
105:       indicator = "dot",
106:       hideLabel = false,
107:       hideIndicator = false,
108:       label,
109:       labelFormatter,
110:       labelClassName,
111:       formatter,
112:       color,
113:       nameKey,
114:       labelKey,
115:     },
116:     ref
117:   ) => {
118:     const { config } = useChart()
119:     const tooltipLabel = React.useMemo(() => {
120:       if (hideLabel || !payload?.length) {
121:         return null
122:       }
123:       const [item] = payload
124:       const key = `${labelKey || item.dataKey || item.name || "value"}`
125:       const itemConfig = getPayloadConfigFromPayload(config, item, key)
126:       const value =
127:         !labelKey && typeof label === "string"
128:           ? config[label as keyof typeof config]?.label || label
129:           : itemConfig?.label
130:       if (labelFormatter) {
131:         return (
132:           <div className={cn("font-medium", labelClassName)}>
133:             {labelFormatter(value, payload)}
134:           </div>
135:         )
136:       }
137:       if (!value) {
138:         return null
139:       }
140:       return <div className={cn("font-medium", labelClassName)}>{value}</div>
141:     }, [
142:       label,
143:       labelFormatter,
144:       payload,
145:       hideLabel,
146:       labelClassName,
147:       config,
148:       labelKey,
149:     ])
150:     if (!active || !payload?.length) {
151:       return null
152:     }
153:     const nestLabel = payload.length === 1 && indicator !== "dot"
154:     return (
155:       <div
156:         ref={ref}
157:         className={cn(
158:           "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
159:           className
160:         )}
161:       >
162:         {!nestLabel ? tooltipLabel : null}
163:         <div className="grid gap-1.5">
164:           {payload.map((item, index) => {
165:             const key = `${nameKey || item.name || item.dataKey || "value"}`
166:             const itemConfig = getPayloadConfigFromPayload(config, item, key)
167:             const indicatorColor = color || item.payload.fill || item.color
168:             return (
169:               <div
170:                 key={item.dataKey}
171:                 className={cn(
172:                   "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
173:                   indicator === "dot" && "items-center"
174:                 )}
175:               >
176:                 {formatter && item?.value !== undefined && item.name ? (
177:                   formatter(item.value, item.name, item, index, item.payload)
178:                 ) : (
179:                   <>
180:                     {itemConfig?.icon ? (
181:                       <itemConfig.icon />
182:                     ) : (
183:                       !hideIndicator && (
184:                         <div
185:                           className={cn(
186:                             "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
187:                             {
188:                               "h-2.5 w-2.5": indicator === "dot",
189:                               "w-1": indicator === "line",
190:                               "w-0 border-[1.5px] border-dashed bg-transparent":
191:                                 indicator === "dashed",
192:                               "my-0.5": nestLabel && indicator === "dashed",
193:                             }
194:                           )}
195:                           style={
196:                             {
197:                               "--color-bg": indicatorColor,
198:                               "--color-border": indicatorColor,
199:                             } as React.CSSProperties
200:                           }
201:                         />
202:                       )
203:                     )}
204:                     <div
205:                       className={cn(
206:                         "flex flex-1 justify-between leading-none",
207:                         nestLabel ? "items-end" : "items-center"
208:                       )}
209:                     >
210:                       <div className="grid gap-1.5">
211:                         {nestLabel ? tooltipLabel : null}
212:                         <span className="text-muted-foreground">
213:                           {itemConfig?.label || item.name}
214:                         </span>
215:                       </div>
216:                       {item.value && (
217:                         <span className="font-mono font-medium tabular-nums text-foreground">
218:                           {item.value.toLocaleString()}
219:                         </span>
220:                       )}
221:                     </div>
222:                   </>
223:                 )}
224:               </div>
225:             )
226:           })}
227:         </div>
228:       </div>
229:     )
230:   }
231: )
232: ChartTooltipContent.displayName = "ChartTooltip"
233: const ChartLegend = RechartsPrimitive.Legend
234: const ChartLegendContent = React.forwardRef<
235:   HTMLDivElement,
236:   React.ComponentProps<"div"> &
237:     Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
238:       hideIcon?: boolean
239:       nameKey?: string
240:     }
241: >(
242:   (
243:     { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
244:     ref
245:   ) => {
246:     const { config } = useChart()
247:     if (!payload?.length) {
248:       return null
249:     }
250:     return (
251:       <div
252:         ref={ref}
253:         className={cn(
254:           "flex items-center justify-center gap-4",
255:           verticalAlign === "top" ? "pb-3" : "pt-3",
256:           className
257:         )}
258:       >
259:         {payload.map((item) => {
260:           const key = `${nameKey || item.dataKey || "value"}`
261:           const itemConfig = getPayloadConfigFromPayload(config, item, key)
262:           return (
263:             <div
264:               key={item.value}
265:               className={cn(
266:                 "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
267:               )}
268:             >
269:               {itemConfig?.icon && !hideIcon ? (
270:                 <itemConfig.icon />
271:               ) : (
272:                 <div
273:                   className="h-2 w-2 shrink-0 rounded-[2px]"
274:                   style={{
275:                     backgroundColor: item.color,
276:                   }}
277:                 />
278:               )}
279:               {itemConfig?.label}
280:             </div>
281:           )
282:         })}
283:       </div>
284:     )
285:   }
286: )
287: ChartLegendContent.displayName = "ChartLegend"
288: // Helper to extract item config from a payload.
289: function getPayloadConfigFromPayload(
290:   config: ChartConfig,
291:   payload: unknown,
292:   key: string
293: ) {
294:   if (typeof payload !== "object" || payload === null) {
295:     return undefined
296:   }
297:   const payloadPayload =
298:     "payload" in payload &&
299:     typeof payload.payload === "object" &&
300:     payload.payload !== null
301:       ? payload.payload
302:       : undefined
303:   let configLabelKey: string = key
304:   if (
305:     key in payload &&
306:     typeof payload[key as keyof typeof payload] === "string"
307:   ) {
308:     configLabelKey = payload[key as keyof typeof payload] as string
309:   } else if (
310:     payloadPayload &&
311:     key in payloadPayload &&
312:     typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
313:   ) {
314:     configLabelKey = payloadPayload[
315:       key as keyof typeof payloadPayload
316:     ] as string
317:   }
318:   return configLabelKey in config
319:     ? config[configLabelKey]
320:     : config[key as keyof typeof config]
321: }
322: export {
323:   ChartContainer,
324:   ChartTooltip,
325:   ChartTooltipContent,
326:   ChartLegend,
327:   ChartLegendContent,
328:   ChartStyle,
329: }
</file>

<file path="components/ui/checkbox.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
 4: import { Check } from "lucide-react"
 5: import { cn } from "@/lib/utils"
 6: const Checkbox = React.forwardRef<
 7:   React.ElementRef<typeof CheckboxPrimitive.Root>,
 8:   React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
 9: >(({ className, ...props }, ref) => (
10:   <CheckboxPrimitive.Root
11:     ref={ref}
12:     className={cn(
13:       "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
14:       className
15:     )}
16:     {...props}
17:   >
18:     <CheckboxPrimitive.Indicator
19:       className={cn("flex items-center justify-center text-current")}
20:     >
21:       <Check className="h-4 w-4" />
22:     </CheckboxPrimitive.Indicator>
23:   </CheckboxPrimitive.Root>
24: ))
25: Checkbox.displayName = CheckboxPrimitive.Root.displayName
26: export { Checkbox }
</file>

<file path="components/ui/collapsible.tsx">
1: "use client"
2: import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"
3: const Collapsible = CollapsiblePrimitive.Root
4: const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger
5: const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent
6: export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="components/ui/command.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import { type DialogProps } from "@radix-ui/react-dialog"
  4: import { Command as CommandPrimitive } from "cmdk"
  5: import { Search } from "lucide-react"
  6: import { cn } from "@/lib/utils"
  7: import { Dialog, DialogContent } from "@/components/ui/dialog"
  8: const Command = React.forwardRef<
  9:   React.ElementRef<typeof CommandPrimitive>,
 10:   React.ComponentPropsWithoutRef<typeof CommandPrimitive>
 11: >(({ className, ...props }, ref) => (
 12:   <CommandPrimitive
 13:     ref={ref}
 14:     className={cn(
 15:       "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
 16:       className
 17:     )}
 18:     {...props}
 19:   />
 20: ))
 21: Command.displayName = CommandPrimitive.displayName
 22: const CommandDialog = ({ children, ...props }: DialogProps) => {
 23:   return (
 24:     <Dialog {...props}>
 25:       <DialogContent className="overflow-hidden p-0 shadow-lg">
 26:         <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
 27:           {children}
 28:         </Command>
 29:       </DialogContent>
 30:     </Dialog>
 31:   )
 32: }
 33: const CommandInput = React.forwardRef<
 34:   React.ElementRef<typeof CommandPrimitive.Input>,
 35:   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
 36: >(({ className, ...props }, ref) => (
 37:   <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
 38:     <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
 39:     <CommandPrimitive.Input
 40:       ref={ref}
 41:       className={cn(
 42:         "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
 43:         className
 44:       )}
 45:       {...props}
 46:     />
 47:   </div>
 48: ))
 49: CommandInput.displayName = CommandPrimitive.Input.displayName
 50: const CommandList = React.forwardRef<
 51:   React.ElementRef<typeof CommandPrimitive.List>,
 52:   React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
 53: >(({ className, ...props }, ref) => (
 54:   <CommandPrimitive.List
 55:     ref={ref}
 56:     className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
 57:     {...props}
 58:   />
 59: ))
 60: CommandList.displayName = CommandPrimitive.List.displayName
 61: const CommandEmpty = React.forwardRef<
 62:   React.ElementRef<typeof CommandPrimitive.Empty>,
 63:   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
 64: >((props, ref) => (
 65:   <CommandPrimitive.Empty
 66:     ref={ref}
 67:     className="py-6 text-center text-sm"
 68:     {...props}
 69:   />
 70: ))
 71: CommandEmpty.displayName = CommandPrimitive.Empty.displayName
 72: const CommandGroup = React.forwardRef<
 73:   React.ElementRef<typeof CommandPrimitive.Group>,
 74:   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
 75: >(({ className, ...props }, ref) => (
 76:   <CommandPrimitive.Group
 77:     ref={ref}
 78:     className={cn(
 79:       "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
 80:       className
 81:     )}
 82:     {...props}
 83:   />
 84: ))
 85: CommandGroup.displayName = CommandPrimitive.Group.displayName
 86: const CommandSeparator = React.forwardRef<
 87:   React.ElementRef<typeof CommandPrimitive.Separator>,
 88:   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
 89: >(({ className, ...props }, ref) => (
 90:   <CommandPrimitive.Separator
 91:     ref={ref}
 92:     className={cn("-mx-1 h-px bg-border", className)}
 93:     {...props}
 94:   />
 95: ))
 96: CommandSeparator.displayName = CommandPrimitive.Separator.displayName
 97: const CommandItem = React.forwardRef<
 98:   React.ElementRef<typeof CommandPrimitive.Item>,
 99:   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
100: >(({ className, ...props }, ref) => (
101:   <CommandPrimitive.Item
102:     ref={ref}
103:     className={cn(
104:       "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
105:       className
106:     )}
107:     {...props}
108:   />
109: ))
110: CommandItem.displayName = CommandPrimitive.Item.displayName
111: const CommandShortcut = ({
112:   className,
113:   ...props
114: }: React.HTMLAttributes<HTMLSpanElement>) => {
115:   return (
116:     <span
117:       className={cn(
118:         "ml-auto text-xs tracking-widest text-muted-foreground",
119:         className
120:       )}
121:       {...props}
122:     />
123:   )
124: }
125: CommandShortcut.displayName = "CommandShortcut"
126: export {
127:   Command,
128:   CommandDialog,
129:   CommandInput,
130:   CommandList,
131:   CommandEmpty,
132:   CommandGroup,
133:   CommandItem,
134:   CommandShortcut,
135:   CommandSeparator,
136: }
</file>

<file path="components/ui/context-menu.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
  4: import { Check, ChevronRight, Circle } from "lucide-react"
  5: import { cn } from "@/lib/utils"
  6: const ContextMenu = ContextMenuPrimitive.Root
  7: const ContextMenuTrigger = ContextMenuPrimitive.Trigger
  8: const ContextMenuGroup = ContextMenuPrimitive.Group
  9: const ContextMenuPortal = ContextMenuPrimitive.Portal
 10: const ContextMenuSub = ContextMenuPrimitive.Sub
 11: const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup
 12: const ContextMenuSubTrigger = React.forwardRef<
 13:   React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
 14:   React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
 15:     inset?: boolean
 16:   }
 17: >(({ className, inset, children, ...props }, ref) => (
 18:   <ContextMenuPrimitive.SubTrigger
 19:     ref={ref}
 20:     className={cn(
 21:       "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
 22:       inset && "pl-8",
 23:       className
 24:     )}
 25:     {...props}
 26:   >
 27:     {children}
 28:     <ChevronRight className="ml-auto h-4 w-4" />
 29:   </ContextMenuPrimitive.SubTrigger>
 30: ))
 31: ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName
 32: const ContextMenuSubContent = React.forwardRef<
 33:   React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
 34:   React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
 35: >(({ className, ...props }, ref) => (
 36:   <ContextMenuPrimitive.SubContent
 37:     ref={ref}
 38:     className={cn(
 39:       "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 40:       className
 41:     )}
 42:     {...props}
 43:   />
 44: ))
 45: ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName
 46: const ContextMenuContent = React.forwardRef<
 47:   React.ElementRef<typeof ContextMenuPrimitive.Content>,
 48:   React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
 49: >(({ className, ...props }, ref) => (
 50:   <ContextMenuPrimitive.Portal>
 51:     <ContextMenuPrimitive.Content
 52:       ref={ref}
 53:       className={cn(
 54:         "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 55:         className
 56:       )}
 57:       {...props}
 58:     />
 59:   </ContextMenuPrimitive.Portal>
 60: ))
 61: ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName
 62: const ContextMenuItem = React.forwardRef<
 63:   React.ElementRef<typeof ContextMenuPrimitive.Item>,
 64:   React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
 65:     inset?: boolean
 66:   }
 67: >(({ className, inset, ...props }, ref) => (
 68:   <ContextMenuPrimitive.Item
 69:     ref={ref}
 70:     className={cn(
 71:       "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
 72:       inset && "pl-8",
 73:       className
 74:     )}
 75:     {...props}
 76:   />
 77: ))
 78: ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName
 79: const ContextMenuCheckboxItem = React.forwardRef<
 80:   React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
 81:   React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
 82: >(({ className, children, checked, ...props }, ref) => (
 83:   <ContextMenuPrimitive.CheckboxItem
 84:     ref={ref}
 85:     className={cn(
 86:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
 87:       className
 88:     )}
 89:     checked={checked}
 90:     {...props}
 91:   >
 92:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
 93:       <ContextMenuPrimitive.ItemIndicator>
 94:         <Check className="h-4 w-4" />
 95:       </ContextMenuPrimitive.ItemIndicator>
 96:     </span>
 97:     {children}
 98:   </ContextMenuPrimitive.CheckboxItem>
 99: ))
100: ContextMenuCheckboxItem.displayName =
101:   ContextMenuPrimitive.CheckboxItem.displayName
102: const ContextMenuRadioItem = React.forwardRef<
103:   React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
104:   React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
105: >(({ className, children, ...props }, ref) => (
106:   <ContextMenuPrimitive.RadioItem
107:     ref={ref}
108:     className={cn(
109:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
110:       className
111:     )}
112:     {...props}
113:   >
114:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
115:       <ContextMenuPrimitive.ItemIndicator>
116:         <Circle className="h-2 w-2 fill-current" />
117:       </ContextMenuPrimitive.ItemIndicator>
118:     </span>
119:     {children}
120:   </ContextMenuPrimitive.RadioItem>
121: ))
122: ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName
123: const ContextMenuLabel = React.forwardRef<
124:   React.ElementRef<typeof ContextMenuPrimitive.Label>,
125:   React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
126:     inset?: boolean
127:   }
128: >(({ className, inset, ...props }, ref) => (
129:   <ContextMenuPrimitive.Label
130:     ref={ref}
131:     className={cn(
132:       "px-2 py-1.5 text-sm font-semibold text-foreground",
133:       inset && "pl-8",
134:       className
135:     )}
136:     {...props}
137:   />
138: ))
139: ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName
140: const ContextMenuSeparator = React.forwardRef<
141:   React.ElementRef<typeof ContextMenuPrimitive.Separator>,
142:   React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
143: >(({ className, ...props }, ref) => (
144:   <ContextMenuPrimitive.Separator
145:     ref={ref}
146:     className={cn("-mx-1 my-1 h-px bg-border", className)}
147:     {...props}
148:   />
149: ))
150: ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName
151: const ContextMenuShortcut = ({
152:   className,
153:   ...props
154: }: React.HTMLAttributes<HTMLSpanElement>) => {
155:   return (
156:     <span
157:       className={cn(
158:         "ml-auto text-xs tracking-widest text-muted-foreground",
159:         className
160:       )}
161:       {...props}
162:     />
163:   )
164: }
165: ContextMenuShortcut.displayName = "ContextMenuShortcut"
166: export {
167:   ContextMenu,
168:   ContextMenuTrigger,
169:   ContextMenuContent,
170:   ContextMenuItem,
171:   ContextMenuCheckboxItem,
172:   ContextMenuRadioItem,
173:   ContextMenuLabel,
174:   ContextMenuSeparator,
175:   ContextMenuShortcut,
176:   ContextMenuGroup,
177:   ContextMenuPortal,
178:   ContextMenuSub,
179:   ContextMenuSubContent,
180:   ContextMenuSubTrigger,
181:   ContextMenuRadioGroup,
182: }
</file>

<file path="components/ui/dialog.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as DialogPrimitive from "@radix-ui/react-dialog"
  4: import { X } from "lucide-react"
  5: import { cn } from "@/lib/utils"
  6: const Dialog = DialogPrimitive.Root
  7: const DialogTrigger = DialogPrimitive.Trigger
  8: const DialogPortal = DialogPrimitive.Portal
  9: const DialogClose = DialogPrimitive.Close
 10: const DialogOverlay = React.forwardRef<
 11:   React.ElementRef<typeof DialogPrimitive.Overlay>,
 12:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
 13: >(({ className, ...props }, ref) => (
 14:   <DialogPrimitive.Overlay
 15:     ref={ref}
 16:     className={cn(
 17:       "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
 18:       className
 19:     )}
 20:     {...props}
 21:   />
 22: ))
 23: DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
 24: const DialogContent = React.forwardRef<
 25:   React.ElementRef<typeof DialogPrimitive.Content>,
 26:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
 27: >(({ className, children, ...props }, ref) => (
 28:   <DialogPortal>
 29:     <DialogOverlay />
 30:     <DialogPrimitive.Content
 31:       ref={ref}
 32:       className={cn(
 33:         "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
 34:         className
 35:       )}
 36:       {...props}
 37:     >
 38:       {children}
 39:       <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
 40:         <X className="h-4 w-4" />
 41:         <span className="sr-only">Close</span>
 42:       </DialogPrimitive.Close>
 43:     </DialogPrimitive.Content>
 44:   </DialogPortal>
 45: ))
 46: DialogContent.displayName = DialogPrimitive.Content.displayName
 47: const DialogHeader = ({
 48:   className,
 49:   ...props
 50: }: React.HTMLAttributes<HTMLDivElement>) => (
 51:   <div
 52:     className={cn(
 53:       "flex flex-col space-y-1.5 text-center sm:text-left",
 54:       className
 55:     )}
 56:     {...props}
 57:   />
 58: )
 59: DialogHeader.displayName = "DialogHeader"
 60: const DialogFooter = ({
 61:   className,
 62:   ...props
 63: }: React.HTMLAttributes<HTMLDivElement>) => (
 64:   <div
 65:     className={cn(
 66:       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
 67:       className
 68:     )}
 69:     {...props}
 70:   />
 71: )
 72: DialogFooter.displayName = "DialogFooter"
 73: const DialogTitle = React.forwardRef<
 74:   React.ElementRef<typeof DialogPrimitive.Title>,
 75:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
 76: >(({ className, ...props }, ref) => (
 77:   <DialogPrimitive.Title
 78:     ref={ref}
 79:     className={cn(
 80:       "text-lg font-semibold leading-none tracking-tight",
 81:       className
 82:     )}
 83:     {...props}
 84:   />
 85: ))
 86: DialogTitle.displayName = DialogPrimitive.Title.displayName
 87: const DialogDescription = React.forwardRef<
 88:   React.ElementRef<typeof DialogPrimitive.Description>,
 89:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
 90: >(({ className, ...props }, ref) => (
 91:   <DialogPrimitive.Description
 92:     ref={ref}
 93:     className={cn("text-sm text-muted-foreground", className)}
 94:     {...props}
 95:   />
 96: ))
 97: DialogDescription.displayName = DialogPrimitive.Description.displayName
 98: export {
 99:   Dialog,
100:   DialogPortal,
101:   DialogOverlay,
102:   DialogClose,
103:   DialogTrigger,
104:   DialogContent,
105:   DialogHeader,
106:   DialogFooter,
107:   DialogTitle,
108:   DialogDescription,
109: }
</file>

<file path="components/ui/drawer.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import { Drawer as DrawerPrimitive } from "vaul"
  4: import { cn } from "@/lib/utils"
  5: const Drawer = ({
  6:   shouldScaleBackground = true,
  7:   ...props
  8: }: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  9:   <DrawerPrimitive.Root
 10:     shouldScaleBackground={shouldScaleBackground}
 11:     {...props}
 12:   />
 13: )
 14: Drawer.displayName = "Drawer"
 15: const DrawerTrigger = DrawerPrimitive.Trigger
 16: const DrawerPortal = DrawerPrimitive.Portal
 17: const DrawerClose = DrawerPrimitive.Close
 18: const DrawerOverlay = React.forwardRef<
 19:   React.ElementRef<typeof DrawerPrimitive.Overlay>,
 20:   React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
 21: >(({ className, ...props }, ref) => (
 22:   <DrawerPrimitive.Overlay
 23:     ref={ref}
 24:     className={cn("fixed inset-0 z-50 bg-black/80", className)}
 25:     {...props}
 26:   />
 27: ))
 28: DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName
 29: const DrawerContent = React.forwardRef<
 30:   React.ElementRef<typeof DrawerPrimitive.Content>,
 31:   React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
 32: >(({ className, children, ...props }, ref) => (
 33:   <DrawerPortal>
 34:     <DrawerOverlay />
 35:     <DrawerPrimitive.Content
 36:       ref={ref}
 37:       className={cn(
 38:         "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
 39:         className
 40:       )}
 41:       {...props}
 42:     >
 43:       <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
 44:       {children}
 45:     </DrawerPrimitive.Content>
 46:   </DrawerPortal>
 47: ))
 48: DrawerContent.displayName = "DrawerContent"
 49: const DrawerHeader = ({
 50:   className,
 51:   ...props
 52: }: React.HTMLAttributes<HTMLDivElement>) => (
 53:   <div
 54:     className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
 55:     {...props}
 56:   />
 57: )
 58: DrawerHeader.displayName = "DrawerHeader"
 59: const DrawerFooter = ({
 60:   className,
 61:   ...props
 62: }: React.HTMLAttributes<HTMLDivElement>) => (
 63:   <div
 64:     className={cn("mt-auto flex flex-col gap-2 p-4", className)}
 65:     {...props}
 66:   />
 67: )
 68: DrawerFooter.displayName = "DrawerFooter"
 69: const DrawerTitle = React.forwardRef<
 70:   React.ElementRef<typeof DrawerPrimitive.Title>,
 71:   React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
 72: >(({ className, ...props }, ref) => (
 73:   <DrawerPrimitive.Title
 74:     ref={ref}
 75:     className={cn(
 76:       "text-lg font-semibold leading-none tracking-tight",
 77:       className
 78:     )}
 79:     {...props}
 80:   />
 81: ))
 82: DrawerTitle.displayName = DrawerPrimitive.Title.displayName
 83: const DrawerDescription = React.forwardRef<
 84:   React.ElementRef<typeof DrawerPrimitive.Description>,
 85:   React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
 86: >(({ className, ...props }, ref) => (
 87:   <DrawerPrimitive.Description
 88:     ref={ref}
 89:     className={cn("text-sm text-muted-foreground", className)}
 90:     {...props}
 91:   />
 92: ))
 93: DrawerDescription.displayName = DrawerPrimitive.Description.displayName
 94: export {
 95:   Drawer,
 96:   DrawerPortal,
 97:   DrawerOverlay,
 98:   DrawerTrigger,
 99:   DrawerClose,
100:   DrawerContent,
101:   DrawerHeader,
102:   DrawerFooter,
103:   DrawerTitle,
104:   DrawerDescription,
105: }
</file>

<file path="components/ui/dropdown-menu.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
  4: import { Check, ChevronRight, Circle } from "lucide-react"
  5: import { cn } from "@/lib/utils"
  6: const DropdownMenu = DropdownMenuPrimitive.Root
  7: const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
  8: const DropdownMenuGroup = DropdownMenuPrimitive.Group
  9: const DropdownMenuPortal = DropdownMenuPrimitive.Portal
 10: const DropdownMenuSub = DropdownMenuPrimitive.Sub
 11: const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup
 12: const DropdownMenuSubTrigger = React.forwardRef<
 13:   React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
 14:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
 15:     inset?: boolean
 16:   }
 17: >(({ className, inset, children, ...props }, ref) => (
 18:   <DropdownMenuPrimitive.SubTrigger
 19:     ref={ref}
 20:     className={cn(
 21:       "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
 22:       inset && "pl-8",
 23:       className
 24:     )}
 25:     {...props}
 26:   >
 27:     {children}
 28:     <ChevronRight className="ml-auto" />
 29:   </DropdownMenuPrimitive.SubTrigger>
 30: ))
 31: DropdownMenuSubTrigger.displayName =
 32:   DropdownMenuPrimitive.SubTrigger.displayName
 33: const DropdownMenuSubContent = React.forwardRef<
 34:   React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
 35:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
 36: >(({ className, ...props }, ref) => (
 37:   <DropdownMenuPrimitive.SubContent
 38:     ref={ref}
 39:     className={cn(
 40:       "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 41:       className
 42:     )}
 43:     {...props}
 44:   />
 45: ))
 46: DropdownMenuSubContent.displayName =
 47:   DropdownMenuPrimitive.SubContent.displayName
 48: const DropdownMenuContent = React.forwardRef<
 49:   React.ElementRef<typeof DropdownMenuPrimitive.Content>,
 50:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
 51: >(({ className, sideOffset = 4, ...props }, ref) => (
 52:   <DropdownMenuPrimitive.Portal>
 53:     <DropdownMenuPrimitive.Content
 54:       ref={ref}
 55:       sideOffset={sideOffset}
 56:       className={cn(
 57:         "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 58:         className
 59:       )}
 60:       {...props}
 61:     />
 62:   </DropdownMenuPrimitive.Portal>
 63: ))
 64: DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName
 65: const DropdownMenuItem = React.forwardRef<
 66:   React.ElementRef<typeof DropdownMenuPrimitive.Item>,
 67:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
 68:     inset?: boolean
 69:   }
 70: >(({ className, inset, ...props }, ref) => (
 71:   <DropdownMenuPrimitive.Item
 72:     ref={ref}
 73:     className={cn(
 74:       "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
 75:       inset && "pl-8",
 76:       className
 77:     )}
 78:     {...props}
 79:   />
 80: ))
 81: DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName
 82: const DropdownMenuCheckboxItem = React.forwardRef<
 83:   React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
 84:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
 85: >(({ className, children, checked, ...props }, ref) => (
 86:   <DropdownMenuPrimitive.CheckboxItem
 87:     ref={ref}
 88:     className={cn(
 89:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
 90:       className
 91:     )}
 92:     checked={checked}
 93:     {...props}
 94:   >
 95:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
 96:       <DropdownMenuPrimitive.ItemIndicator>
 97:         <Check className="h-4 w-4" />
 98:       </DropdownMenuPrimitive.ItemIndicator>
 99:     </span>
100:     {children}
101:   </DropdownMenuPrimitive.CheckboxItem>
102: ))
103: DropdownMenuCheckboxItem.displayName =
104:   DropdownMenuPrimitive.CheckboxItem.displayName
105: const DropdownMenuRadioItem = React.forwardRef<
106:   React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
107:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
108: >(({ className, children, ...props }, ref) => (
109:   <DropdownMenuPrimitive.RadioItem
110:     ref={ref}
111:     className={cn(
112:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
113:       className
114:     )}
115:     {...props}
116:   >
117:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
118:       <DropdownMenuPrimitive.ItemIndicator>
119:         <Circle className="h-2 w-2 fill-current" />
120:       </DropdownMenuPrimitive.ItemIndicator>
121:     </span>
122:     {children}
123:   </DropdownMenuPrimitive.RadioItem>
124: ))
125: DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName
126: const DropdownMenuLabel = React.forwardRef<
127:   React.ElementRef<typeof DropdownMenuPrimitive.Label>,
128:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
129:     inset?: boolean
130:   }
131: >(({ className, inset, ...props }, ref) => (
132:   <DropdownMenuPrimitive.Label
133:     ref={ref}
134:     className={cn(
135:       "px-2 py-1.5 text-sm font-semibold",
136:       inset && "pl-8",
137:       className
138:     )}
139:     {...props}
140:   />
141: ))
142: DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName
143: const DropdownMenuSeparator = React.forwardRef<
144:   React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
145:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
146: >(({ className, ...props }, ref) => (
147:   <DropdownMenuPrimitive.Separator
148:     ref={ref}
149:     className={cn("-mx-1 my-1 h-px bg-muted", className)}
150:     {...props}
151:   />
152: ))
153: DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName
154: const DropdownMenuShortcut = ({
155:   className,
156:   ...props
157: }: React.HTMLAttributes<HTMLSpanElement>) => {
158:   return (
159:     <span
160:       className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
161:       {...props}
162:     />
163:   )
164: }
165: DropdownMenuShortcut.displayName = "DropdownMenuShortcut"
166: export {
167:   DropdownMenu,
168:   DropdownMenuTrigger,
169:   DropdownMenuContent,
170:   DropdownMenuItem,
171:   DropdownMenuCheckboxItem,
172:   DropdownMenuRadioItem,
173:   DropdownMenuLabel,
174:   DropdownMenuSeparator,
175:   DropdownMenuShortcut,
176:   DropdownMenuGroup,
177:   DropdownMenuPortal,
178:   DropdownMenuSub,
179:   DropdownMenuSubContent,
180:   DropdownMenuSubTrigger,
181:   DropdownMenuRadioGroup,
182: }
</file>

<file path="components/ui/form.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as LabelPrimitive from "@radix-ui/react-label"
  4: import { Slot } from "@radix-ui/react-slot"
  5: import {
  6:   Controller,
  7:   ControllerProps,
  8:   FieldPath,
  9:   FieldValues,
 10:   FormProvider,
 11:   useFormContext,
 12: } from "react-hook-form"
 13: import { cn } from "@/lib/utils"
 14: import { Label } from "@/components/ui/label"
 15: const Form = FormProvider
 16: type FormFieldContextValue<
 17:   TFieldValues extends FieldValues = FieldValues,
 18:   TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
 19: > = {
 20:   name: TName
 21: }
 22: const FormFieldContext = React.createContext<FormFieldContextValue>(
 23:   {} as FormFieldContextValue
 24: )
 25: const FormField = <
 26:   TFieldValues extends FieldValues = FieldValues,
 27:   TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
 28: >({
 29:   ...props
 30: }: ControllerProps<TFieldValues, TName>) => {
 31:   return (
 32:     <FormFieldContext.Provider value={{ name: props.name }}>
 33:       <Controller {...props} />
 34:     </FormFieldContext.Provider>
 35:   )
 36: }
 37: const useFormField = () => {
 38:   const fieldContext = React.useContext(FormFieldContext)
 39:   const itemContext = React.useContext(FormItemContext)
 40:   const { getFieldState, formState } = useFormContext()
 41:   const fieldState = getFieldState(fieldContext.name, formState)
 42:   if (!fieldContext) {
 43:     throw new Error("useFormField should be used within <FormField>")
 44:   }
 45:   const { id } = itemContext
 46:   return {
 47:     id,
 48:     name: fieldContext.name,
 49:     formItemId: `${id}-form-item`,
 50:     formDescriptionId: `${id}-form-item-description`,
 51:     formMessageId: `${id}-form-item-message`,
 52:     ...fieldState,
 53:   }
 54: }
 55: type FormItemContextValue = {
 56:   id: string
 57: }
 58: const FormItemContext = React.createContext<FormItemContextValue>(
 59:   {} as FormItemContextValue
 60: )
 61: const FormItem = React.forwardRef<
 62:   HTMLDivElement,
 63:   React.HTMLAttributes<HTMLDivElement>
 64: >(({ className, ...props }, ref) => {
 65:   const id = React.useId()
 66:   return (
 67:     <FormItemContext.Provider value={{ id }}>
 68:       <div ref={ref} className={cn("space-y-2", className)} {...props} />
 69:     </FormItemContext.Provider>
 70:   )
 71: })
 72: FormItem.displayName = "FormItem"
 73: const FormLabel = React.forwardRef<
 74:   React.ElementRef<typeof LabelPrimitive.Root>,
 75:   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
 76: >(({ className, ...props }, ref) => {
 77:   const { error, formItemId } = useFormField()
 78:   return (
 79:     <Label
 80:       ref={ref}
 81:       className={cn(error && "text-destructive", className)}
 82:       htmlFor={formItemId}
 83:       {...props}
 84:     />
 85:   )
 86: })
 87: FormLabel.displayName = "FormLabel"
 88: const FormControl = React.forwardRef<
 89:   React.ElementRef<typeof Slot>,
 90:   React.ComponentPropsWithoutRef<typeof Slot>
 91: >(({ ...props }, ref) => {
 92:   const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
 93:   return (
 94:     <Slot
 95:       ref={ref}
 96:       id={formItemId}
 97:       aria-describedby={
 98:         !error
 99:           ? `${formDescriptionId}`
100:           : `${formDescriptionId} ${formMessageId}`
101:       }
102:       aria-invalid={!!error}
103:       {...props}
104:     />
105:   )
106: })
107: FormControl.displayName = "FormControl"
108: const FormDescription = React.forwardRef<
109:   HTMLParagraphElement,
110:   React.HTMLAttributes<HTMLParagraphElement>
111: >(({ className, ...props }, ref) => {
112:   const { formDescriptionId } = useFormField()
113:   return (
114:     <p
115:       ref={ref}
116:       id={formDescriptionId}
117:       className={cn("text-sm text-muted-foreground", className)}
118:       {...props}
119:     />
120:   )
121: })
122: FormDescription.displayName = "FormDescription"
123: const FormMessage = React.forwardRef<
124:   HTMLParagraphElement,
125:   React.HTMLAttributes<HTMLParagraphElement>
126: >(({ className, children, ...props }, ref) => {
127:   const { error, formMessageId } = useFormField()
128:   const body = error ? String(error?.message) : children
129:   if (!body) {
130:     return null
131:   }
132:   return (
133:     <p
134:       ref={ref}
135:       id={formMessageId}
136:       className={cn("text-sm font-medium text-destructive", className)}
137:       {...props}
138:     >
139:       {body}
140:     </p>
141:   )
142: })
143: FormMessage.displayName = "FormMessage"
144: export {
145:   useFormField,
146:   Form,
147:   FormItem,
148:   FormLabel,
149:   FormControl,
150:   FormDescription,
151:   FormMessage,
152:   FormField,
153: }
</file>

<file path="components/ui/hover-card.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as HoverCardPrimitive from "@radix-ui/react-hover-card"
 4: import { cn } from "@/lib/utils"
 5: const HoverCard = HoverCardPrimitive.Root
 6: const HoverCardTrigger = HoverCardPrimitive.Trigger
 7: const HoverCardContent = React.forwardRef<
 8:   React.ElementRef<typeof HoverCardPrimitive.Content>,
 9:   React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
10: >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
11:   <HoverCardPrimitive.Content
12:     ref={ref}
13:     align={align}
14:     sideOffset={sideOffset}
15:     className={cn(
16:       "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
17:       className
18:     )}
19:     {...props}
20:   />
21: ))
22: HoverCardContent.displayName = HoverCardPrimitive.Content.displayName
23: export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="components/ui/input-otp.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import { OTPInput, OTPInputContext } from "input-otp"
 4: import { Dot } from "lucide-react"
 5: import { cn } from "@/lib/utils"
 6: const InputOTP = React.forwardRef<
 7:   React.ElementRef<typeof OTPInput>,
 8:   React.ComponentPropsWithoutRef<typeof OTPInput>
 9: >(({ className, containerClassName, ...props }, ref) => (
10:   <OTPInput
11:     ref={ref}
12:     containerClassName={cn(
13:       "flex items-center gap-2 has-[:disabled]:opacity-50",
14:       containerClassName
15:     )}
16:     className={cn("disabled:cursor-not-allowed", className)}
17:     {...props}
18:   />
19: ))
20: InputOTP.displayName = "InputOTP"
21: const InputOTPGroup = React.forwardRef<
22:   React.ElementRef<"div">,
23:   React.ComponentPropsWithoutRef<"div">
24: >(({ className, ...props }, ref) => (
25:   <div ref={ref} className={cn("flex items-center", className)} {...props} />
26: ))
27: InputOTPGroup.displayName = "InputOTPGroup"
28: const InputOTPSlot = React.forwardRef<
29:   React.ElementRef<"div">,
30:   React.ComponentPropsWithoutRef<"div"> & { index: number }
31: >(({ index, className, ...props }, ref) => {
32:   const inputOTPContext = React.useContext(OTPInputContext)
33:   const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]
34:   return (
35:     <div
36:       ref={ref}
37:       className={cn(
38:         "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
39:         isActive && "z-10 ring-2 ring-ring ring-offset-background",
40:         className
41:       )}
42:       {...props}
43:     >
44:       {char}
45:       {hasFakeCaret && (
46:         <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
47:           <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
48:         </div>
49:       )}
50:     </div>
51:   )
52: })
53: InputOTPSlot.displayName = "InputOTPSlot"
54: const InputOTPSeparator = React.forwardRef<
55:   React.ElementRef<"div">,
56:   React.ComponentPropsWithoutRef<"div">
57: >(({ ...props }, ref) => (
58:   <div ref={ref} role="separator" {...props}>
59:     <Dot />
60:   </div>
61: ))
62: InputOTPSeparator.displayName = "InputOTPSeparator"
63: export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="components/ui/input.tsx">
 1: import * as React from "react"
 2: import { cn } from "@/lib/utils"
 3: const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
 4:   ({ className, type, ...props }, ref) => {
 5:     return (
 6:       <input
 7:         type={type}
 8:         className={cn(
 9:           "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
10:           className
11:         )}
12:         ref={ref}
13:         {...props}
14:       />
15:     )
16:   }
17: )
18: Input.displayName = "Input"
19: export { Input }
</file>

<file path="components/ui/label.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as LabelPrimitive from "@radix-ui/react-label"
 4: import { cva, type VariantProps } from "class-variance-authority"
 5: import { cn } from "@/lib/utils"
 6: const labelVariants = cva(
 7:   "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
 8: )
 9: const Label = React.forwardRef<
10:   React.ElementRef<typeof LabelPrimitive.Root>,
11:   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
12:     VariantProps<typeof labelVariants>
13: >(({ className, ...props }, ref) => (
14:   <LabelPrimitive.Root
15:     ref={ref}
16:     className={cn(labelVariants(), className)}
17:     {...props}
18:   />
19: ))
20: Label.displayName = LabelPrimitive.Root.displayName
21: export { Label }
</file>

<file path="components/ui/menubar.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as MenubarPrimitive from "@radix-ui/react-menubar"
  4: import { Check, ChevronRight, Circle } from "lucide-react"
  5: import { cn } from "@/lib/utils"
  6: const MenubarMenu = MenubarPrimitive.Menu
  7: const MenubarGroup = MenubarPrimitive.Group
  8: const MenubarPortal = MenubarPrimitive.Portal
  9: const MenubarSub = MenubarPrimitive.Sub
 10: const MenubarRadioGroup = MenubarPrimitive.RadioGroup
 11: const Menubar = React.forwardRef<
 12:   React.ElementRef<typeof MenubarPrimitive.Root>,
 13:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
 14: >(({ className, ...props }, ref) => (
 15:   <MenubarPrimitive.Root
 16:     ref={ref}
 17:     className={cn(
 18:       "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
 19:       className
 20:     )}
 21:     {...props}
 22:   />
 23: ))
 24: Menubar.displayName = MenubarPrimitive.Root.displayName
 25: const MenubarTrigger = React.forwardRef<
 26:   React.ElementRef<typeof MenubarPrimitive.Trigger>,
 27:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
 28: >(({ className, ...props }, ref) => (
 29:   <MenubarPrimitive.Trigger
 30:     ref={ref}
 31:     className={cn(
 32:       "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
 33:       className
 34:     )}
 35:     {...props}
 36:   />
 37: ))
 38: MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName
 39: const MenubarSubTrigger = React.forwardRef<
 40:   React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
 41:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
 42:     inset?: boolean
 43:   }
 44: >(({ className, inset, children, ...props }, ref) => (
 45:   <MenubarPrimitive.SubTrigger
 46:     ref={ref}
 47:     className={cn(
 48:       "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
 49:       inset && "pl-8",
 50:       className
 51:     )}
 52:     {...props}
 53:   >
 54:     {children}
 55:     <ChevronRight className="ml-auto h-4 w-4" />
 56:   </MenubarPrimitive.SubTrigger>
 57: ))
 58: MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName
 59: const MenubarSubContent = React.forwardRef<
 60:   React.ElementRef<typeof MenubarPrimitive.SubContent>,
 61:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
 62: >(({ className, ...props }, ref) => (
 63:   <MenubarPrimitive.SubContent
 64:     ref={ref}
 65:     className={cn(
 66:       "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 67:       className
 68:     )}
 69:     {...props}
 70:   />
 71: ))
 72: MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName
 73: const MenubarContent = React.forwardRef<
 74:   React.ElementRef<typeof MenubarPrimitive.Content>,
 75:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
 76: >(
 77:   (
 78:     { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
 79:     ref
 80:   ) => (
 81:     <MenubarPrimitive.Portal>
 82:       <MenubarPrimitive.Content
 83:         ref={ref}
 84:         align={align}
 85:         alignOffset={alignOffset}
 86:         sideOffset={sideOffset}
 87:         className={cn(
 88:           "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 89:           className
 90:         )}
 91:         {...props}
 92:       />
 93:     </MenubarPrimitive.Portal>
 94:   )
 95: )
 96: MenubarContent.displayName = MenubarPrimitive.Content.displayName
 97: const MenubarItem = React.forwardRef<
 98:   React.ElementRef<typeof MenubarPrimitive.Item>,
 99:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
100:     inset?: boolean
101:   }
102: >(({ className, inset, ...props }, ref) => (
103:   <MenubarPrimitive.Item
104:     ref={ref}
105:     className={cn(
106:       "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
107:       inset && "pl-8",
108:       className
109:     )}
110:     {...props}
111:   />
112: ))
113: MenubarItem.displayName = MenubarPrimitive.Item.displayName
114: const MenubarCheckboxItem = React.forwardRef<
115:   React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
116:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
117: >(({ className, children, checked, ...props }, ref) => (
118:   <MenubarPrimitive.CheckboxItem
119:     ref={ref}
120:     className={cn(
121:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
122:       className
123:     )}
124:     checked={checked}
125:     {...props}
126:   >
127:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
128:       <MenubarPrimitive.ItemIndicator>
129:         <Check className="h-4 w-4" />
130:       </MenubarPrimitive.ItemIndicator>
131:     </span>
132:     {children}
133:   </MenubarPrimitive.CheckboxItem>
134: ))
135: MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName
136: const MenubarRadioItem = React.forwardRef<
137:   React.ElementRef<typeof MenubarPrimitive.RadioItem>,
138:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
139: >(({ className, children, ...props }, ref) => (
140:   <MenubarPrimitive.RadioItem
141:     ref={ref}
142:     className={cn(
143:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
144:       className
145:     )}
146:     {...props}
147:   >
148:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
149:       <MenubarPrimitive.ItemIndicator>
150:         <Circle className="h-2 w-2 fill-current" />
151:       </MenubarPrimitive.ItemIndicator>
152:     </span>
153:     {children}
154:   </MenubarPrimitive.RadioItem>
155: ))
156: MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName
157: const MenubarLabel = React.forwardRef<
158:   React.ElementRef<typeof MenubarPrimitive.Label>,
159:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
160:     inset?: boolean
161:   }
162: >(({ className, inset, ...props }, ref) => (
163:   <MenubarPrimitive.Label
164:     ref={ref}
165:     className={cn(
166:       "px-2 py-1.5 text-sm font-semibold",
167:       inset && "pl-8",
168:       className
169:     )}
170:     {...props}
171:   />
172: ))
173: MenubarLabel.displayName = MenubarPrimitive.Label.displayName
174: const MenubarSeparator = React.forwardRef<
175:   React.ElementRef<typeof MenubarPrimitive.Separator>,
176:   React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
177: >(({ className, ...props }, ref) => (
178:   <MenubarPrimitive.Separator
179:     ref={ref}
180:     className={cn("-mx-1 my-1 h-px bg-muted", className)}
181:     {...props}
182:   />
183: ))
184: MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName
185: const MenubarShortcut = ({
186:   className,
187:   ...props
188: }: React.HTMLAttributes<HTMLSpanElement>) => {
189:   return (
190:     <span
191:       className={cn(
192:         "ml-auto text-xs tracking-widest text-muted-foreground",
193:         className
194:       )}
195:       {...props}
196:     />
197:   )
198: }
199: MenubarShortcut.displayname = "MenubarShortcut"
200: export {
201:   Menubar,
202:   MenubarMenu,
203:   MenubarTrigger,
204:   MenubarContent,
205:   MenubarItem,
206:   MenubarSeparator,
207:   MenubarLabel,
208:   MenubarCheckboxItem,
209:   MenubarRadioGroup,
210:   MenubarRadioItem,
211:   MenubarPortal,
212:   MenubarSubContent,
213:   MenubarSubTrigger,
214:   MenubarGroup,
215:   MenubarSub,
216:   MenubarShortcut,
217: }
</file>

<file path="components/ui/navigation-menu.tsx">
  1: import * as React from "react"
  2: import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
  3: import { cva } from "class-variance-authority"
  4: import { ChevronDown } from "lucide-react"
  5: import { cn } from "@/lib/utils"
  6: const NavigationMenu = React.forwardRef<
  7:   React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  8:   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
  9: >(({ className, children, ...props }, ref) => (
 10:   <NavigationMenuPrimitive.Root
 11:     ref={ref}
 12:     className={cn(
 13:       "relative z-10 flex max-w-max flex-1 items-center justify-center",
 14:       className
 15:     )}
 16:     {...props}
 17:   >
 18:     {children}
 19:     <NavigationMenuViewport />
 20:   </NavigationMenuPrimitive.Root>
 21: ))
 22: NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName
 23: const NavigationMenuList = React.forwardRef<
 24:   React.ElementRef<typeof NavigationMenuPrimitive.List>,
 25:   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
 26: >(({ className, ...props }, ref) => (
 27:   <NavigationMenuPrimitive.List
 28:     ref={ref}
 29:     className={cn(
 30:       "group flex flex-1 list-none items-center justify-center space-x-1",
 31:       className
 32:     )}
 33:     {...props}
 34:   />
 35: ))
 36: NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName
 37: const NavigationMenuItem = NavigationMenuPrimitive.Item
 38: const navigationMenuTriggerStyle = cva(
 39:   "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
 40: )
 41: const NavigationMenuTrigger = React.forwardRef<
 42:   React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
 43:   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
 44: >(({ className, children, ...props }, ref) => (
 45:   <NavigationMenuPrimitive.Trigger
 46:     ref={ref}
 47:     className={cn(navigationMenuTriggerStyle(), "group", className)}
 48:     {...props}
 49:   >
 50:     {children}{" "}
 51:     <ChevronDown
 52:       className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
 53:       aria-hidden="true"
 54:     />
 55:   </NavigationMenuPrimitive.Trigger>
 56: ))
 57: NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName
 58: const NavigationMenuContent = React.forwardRef<
 59:   React.ElementRef<typeof NavigationMenuPrimitive.Content>,
 60:   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
 61: >(({ className, ...props }, ref) => (
 62:   <NavigationMenuPrimitive.Content
 63:     ref={ref}
 64:     className={cn(
 65:       "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
 66:       className
 67:     )}
 68:     {...props}
 69:   />
 70: ))
 71: NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName
 72: const NavigationMenuLink = NavigationMenuPrimitive.Link
 73: const NavigationMenuViewport = React.forwardRef<
 74:   React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
 75:   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
 76: >(({ className, ...props }, ref) => (
 77:   <div className={cn("absolute left-0 top-full flex justify-center")}>
 78:     <NavigationMenuPrimitive.Viewport
 79:       className={cn(
 80:         "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
 81:         className
 82:       )}
 83:       ref={ref}
 84:       {...props}
 85:     />
 86:   </div>
 87: ))
 88: NavigationMenuViewport.displayName =
 89:   NavigationMenuPrimitive.Viewport.displayName
 90: const NavigationMenuIndicator = React.forwardRef<
 91:   React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
 92:   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
 93: >(({ className, ...props }, ref) => (
 94:   <NavigationMenuPrimitive.Indicator
 95:     ref={ref}
 96:     className={cn(
 97:       "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
 98:       className
 99:     )}
100:     {...props}
101:   >
102:     <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
103:   </NavigationMenuPrimitive.Indicator>
104: ))
105: NavigationMenuIndicator.displayName =
106:   NavigationMenuPrimitive.Indicator.displayName
107: export {
108:   navigationMenuTriggerStyle,
109:   NavigationMenu,
110:   NavigationMenuList,
111:   NavigationMenuItem,
112:   NavigationMenuContent,
113:   NavigationMenuTrigger,
114:   NavigationMenuLink,
115:   NavigationMenuIndicator,
116:   NavigationMenuViewport,
117: }
</file>

<file path="components/ui/pagination.tsx">
  1: import * as React from "react"
  2: import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"
  3: import { cn } from "@/lib/utils"
  4: import { ButtonProps, buttonVariants } from "@/components/ui/button"
  5: const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  6:   <nav
  7:     role="navigation"
  8:     aria-label="pagination"
  9:     className={cn("mx-auto flex w-full justify-center", className)}
 10:     {...props}
 11:   />
 12: )
 13: Pagination.displayName = "Pagination"
 14: const PaginationContent = React.forwardRef<
 15:   HTMLUListElement,
 16:   React.ComponentProps<"ul">
 17: >(({ className, ...props }, ref) => (
 18:   <ul
 19:     ref={ref}
 20:     className={cn("flex flex-row items-center gap-1", className)}
 21:     {...props}
 22:   />
 23: ))
 24: PaginationContent.displayName = "PaginationContent"
 25: const PaginationItem = React.forwardRef<
 26:   HTMLLIElement,
 27:   React.ComponentProps<"li">
 28: >(({ className, ...props }, ref) => (
 29:   <li ref={ref} className={cn("", className)} {...props} />
 30: ))
 31: PaginationItem.displayName = "PaginationItem"
 32: type PaginationLinkProps = {
 33:   isActive?: boolean
 34: } & Pick<ButtonProps, "size"> &
 35:   React.ComponentProps<"a">
 36: const PaginationLink = ({
 37:   className,
 38:   isActive,
 39:   size = "icon",
 40:   ...props
 41: }: PaginationLinkProps) => (
 42:   <a
 43:     aria-current={isActive ? "page" : undefined}
 44:     className={cn(
 45:       buttonVariants({
 46:         variant: isActive ? "outline" : "ghost",
 47:         size,
 48:       }),
 49:       className
 50:     )}
 51:     {...props}
 52:   />
 53: )
 54: PaginationLink.displayName = "PaginationLink"
 55: const PaginationPrevious = ({
 56:   className,
 57:   ...props
 58: }: React.ComponentProps<typeof PaginationLink>) => (
 59:   <PaginationLink
 60:     aria-label="Go to previous page"
 61:     size="default"
 62:     className={cn("gap-1 pl-2.5", className)}
 63:     {...props}
 64:   >
 65:     <ChevronLeft className="h-4 w-4" />
 66:     <span>Previous</span>
 67:   </PaginationLink>
 68: )
 69: PaginationPrevious.displayName = "PaginationPrevious"
 70: const PaginationNext = ({
 71:   className,
 72:   ...props
 73: }: React.ComponentProps<typeof PaginationLink>) => (
 74:   <PaginationLink
 75:     aria-label="Go to next page"
 76:     size="default"
 77:     className={cn("gap-1 pr-2.5", className)}
 78:     {...props}
 79:   >
 80:     <span>Next</span>
 81:     <ChevronRight className="h-4 w-4" />
 82:   </PaginationLink>
 83: )
 84: PaginationNext.displayName = "PaginationNext"
 85: const PaginationEllipsis = ({
 86:   className,
 87:   ...props
 88: }: React.ComponentProps<"span">) => (
 89:   <span
 90:     aria-hidden
 91:     className={cn("flex h-9 w-9 items-center justify-center", className)}
 92:     {...props}
 93:   >
 94:     <MoreHorizontal className="h-4 w-4" />
 95:     <span className="sr-only">More pages</span>
 96:   </span>
 97: )
 98: PaginationEllipsis.displayName = "PaginationEllipsis"
 99: export {
100:   Pagination,
101:   PaginationContent,
102:   PaginationEllipsis,
103:   PaginationItem,
104:   PaginationLink,
105:   PaginationNext,
106:   PaginationPrevious,
107: }
</file>

<file path="components/ui/popover.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as PopoverPrimitive from "@radix-ui/react-popover"
 4: import { cn } from "@/lib/utils"
 5: const Popover = PopoverPrimitive.Root
 6: const PopoverTrigger = PopoverPrimitive.Trigger
 7: const PopoverContent = React.forwardRef<
 8:   React.ElementRef<typeof PopoverPrimitive.Content>,
 9:   React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
10: >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
11:   <PopoverPrimitive.Portal>
12:     <PopoverPrimitive.Content
13:       ref={ref}
14:       align={align}
15:       sideOffset={sideOffset}
16:       className={cn(
17:         "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
18:         className
19:       )}
20:       {...props}
21:     />
22:   </PopoverPrimitive.Portal>
23: ))
24: PopoverContent.displayName = PopoverPrimitive.Content.displayName
25: export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="components/ui/progress.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as ProgressPrimitive from "@radix-ui/react-progress"
 4: import { cn } from "@/lib/utils"
 5: const Progress = React.forwardRef<
 6:   React.ElementRef<typeof ProgressPrimitive.Root>,
 7:   React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
 8: >(({ className, value, ...props }, ref) => (
 9:   <ProgressPrimitive.Root
10:     ref={ref}
11:     className={cn(
12:       "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
13:       className
14:     )}
15:     {...props}
16:   >
17:     <ProgressPrimitive.Indicator
18:       className="h-full w-full flex-1 bg-primary transition-all"
19:       style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
20:     />
21:   </ProgressPrimitive.Root>
22: ))
23: Progress.displayName = ProgressPrimitive.Root.displayName
24: export { Progress }
</file>

<file path="components/ui/radio-group.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
 4: import { Circle } from "lucide-react"
 5: import { cn } from "@/lib/utils"
 6: const RadioGroup = React.forwardRef<
 7:   React.ElementRef<typeof RadioGroupPrimitive.Root>,
 8:   React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
 9: >(({ className, ...props }, ref) => {
10:   return (
11:     <RadioGroupPrimitive.Root
12:       className={cn("grid gap-2", className)}
13:       {...props}
14:       ref={ref}
15:     />
16:   )
17: })
18: RadioGroup.displayName = RadioGroupPrimitive.Root.displayName
19: const RadioGroupItem = React.forwardRef<
20:   React.ElementRef<typeof RadioGroupPrimitive.Item>,
21:   React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
22: >(({ className, ...props }, ref) => {
23:   return (
24:     <RadioGroupPrimitive.Item
25:       ref={ref}
26:       className={cn(
27:         "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
28:         className
29:       )}
30:       {...props}
31:     >
32:       <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
33:         <Circle className="h-2.5 w-2.5 fill-current text-current" />
34:       </RadioGroupPrimitive.Indicator>
35:     </RadioGroupPrimitive.Item>
36:   )
37: })
38: RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName
39: export { RadioGroup, RadioGroupItem }
</file>

<file path="components/ui/resizable.tsx">
 1: "use client"
 2: import { GripVertical } from "lucide-react"
 3: import * as ResizablePrimitive from "react-resizable-panels"
 4: import { cn } from "@/lib/utils"
 5: const ResizablePanelGroup = ({
 6:   className,
 7:   ...props
 8: }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
 9:   <ResizablePrimitive.PanelGroup
10:     className={cn(
11:       "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
12:       className
13:     )}
14:     {...props}
15:   />
16: )
17: const ResizablePanel = ResizablePrimitive.Panel
18: const ResizableHandle = ({
19:   withHandle,
20:   className,
21:   ...props
22: }: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
23:   withHandle?: boolean
24: }) => (
25:   <ResizablePrimitive.PanelResizeHandle
26:     className={cn(
27:       "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
28:       className
29:     )}
30:     {...props}
31:   >
32:     {withHandle && (
33:       <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
34:         <GripVertical className="h-2.5 w-2.5" />
35:       </div>
36:     )}
37:   </ResizablePrimitive.PanelResizeHandle>
38: )
39: export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="components/ui/scroll-area.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
 4: import { cn } from "@/lib/utils"
 5: const ScrollArea = React.forwardRef<
 6:   React.ElementRef<typeof ScrollAreaPrimitive.Root>,
 7:   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
 8: >(({ className, children, ...props }, ref) => (
 9:   <ScrollAreaPrimitive.Root
10:     ref={ref}
11:     className={cn("relative overflow-hidden", className)}
12:     {...props}
13:   >
14:     <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
15:       {children}
16:     </ScrollAreaPrimitive.Viewport>
17:     <ScrollBar />
18:     <ScrollAreaPrimitive.Corner />
19:   </ScrollAreaPrimitive.Root>
20: ))
21: ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
22: const ScrollBar = React.forwardRef<
23:   React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
24:   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
25: >(({ className, orientation = "vertical", ...props }, ref) => (
26:   <ScrollAreaPrimitive.ScrollAreaScrollbar
27:     ref={ref}
28:     orientation={orientation}
29:     className={cn(
30:       "flex touch-none select-none transition-colors",
31:       orientation === "vertical" &&
32:         "h-full w-2.5 border-l border-l-transparent p-[1px]",
33:       orientation === "horizontal" &&
34:         "h-2.5 flex-col border-t border-t-transparent p-[1px]",
35:       className
36:     )}
37:     {...props}
38:   >
39:     <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
40:   </ScrollAreaPrimitive.ScrollAreaScrollbar>
41: ))
42: ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
43: export { ScrollArea, ScrollBar }
</file>

<file path="components/ui/select.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as SelectPrimitive from "@radix-ui/react-select"
  4: import { Check, ChevronDown, ChevronUp } from "lucide-react"
  5: import { cn } from "@/lib/utils"
  6: const Select = SelectPrimitive.Root
  7: const SelectGroup = SelectPrimitive.Group
  8: const SelectValue = SelectPrimitive.Value
  9: const SelectTrigger = React.forwardRef<
 10:   React.ElementRef<typeof SelectPrimitive.Trigger>,
 11:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
 12: >(({ className, children, ...props }, ref) => (
 13:   <SelectPrimitive.Trigger
 14:     ref={ref}
 15:     className={cn(
 16:       "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
 17:       className
 18:     )}
 19:     {...props}
 20:   >
 21:     {children}
 22:     <SelectPrimitive.Icon asChild>
 23:       <ChevronDown className="h-4 w-4 opacity-50" />
 24:     </SelectPrimitive.Icon>
 25:   </SelectPrimitive.Trigger>
 26: ))
 27: SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
 28: const SelectScrollUpButton = React.forwardRef<
 29:   React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
 30:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
 31: >(({ className, ...props }, ref) => (
 32:   <SelectPrimitive.ScrollUpButton
 33:     ref={ref}
 34:     className={cn(
 35:       "flex cursor-default items-center justify-center py-1",
 36:       className
 37:     )}
 38:     {...props}
 39:   >
 40:     <ChevronUp className="h-4 w-4" />
 41:   </SelectPrimitive.ScrollUpButton>
 42: ))
 43: SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
 44: const SelectScrollDownButton = React.forwardRef<
 45:   React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
 46:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
 47: >(({ className, ...props }, ref) => (
 48:   <SelectPrimitive.ScrollDownButton
 49:     ref={ref}
 50:     className={cn(
 51:       "flex cursor-default items-center justify-center py-1",
 52:       className
 53:     )}
 54:     {...props}
 55:   >
 56:     <ChevronDown className="h-4 w-4" />
 57:   </SelectPrimitive.ScrollDownButton>
 58: ))
 59: SelectScrollDownButton.displayName =
 60:   SelectPrimitive.ScrollDownButton.displayName
 61: const SelectContent = React.forwardRef<
 62:   React.ElementRef<typeof SelectPrimitive.Content>,
 63:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
 64: >(({ className, children, position = "popper", ...props }, ref) => (
 65:   <SelectPrimitive.Portal>
 66:     <SelectPrimitive.Content
 67:       ref={ref}
 68:       className={cn(
 69:         "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 70:         position === "popper" &&
 71:           "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
 72:         className
 73:       )}
 74:       position={position}
 75:       {...props}
 76:     >
 77:       <SelectScrollUpButton />
 78:       <SelectPrimitive.Viewport
 79:         className={cn(
 80:           "p-1",
 81:           position === "popper" &&
 82:             "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
 83:         )}
 84:       >
 85:         {children}
 86:       </SelectPrimitive.Viewport>
 87:       <SelectScrollDownButton />
 88:     </SelectPrimitive.Content>
 89:   </SelectPrimitive.Portal>
 90: ))
 91: SelectContent.displayName = SelectPrimitive.Content.displayName
 92: const SelectLabel = React.forwardRef<
 93:   React.ElementRef<typeof SelectPrimitive.Label>,
 94:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
 95: >(({ className, ...props }, ref) => (
 96:   <SelectPrimitive.Label
 97:     ref={ref}
 98:     className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
 99:     {...props}
100:   />
101: ))
102: SelectLabel.displayName = SelectPrimitive.Label.displayName
103: const SelectItem = React.forwardRef<
104:   React.ElementRef<typeof SelectPrimitive.Item>,
105:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
106: >(({ className, children, ...props }, ref) => (
107:   <SelectPrimitive.Item
108:     ref={ref}
109:     className={cn(
110:       "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
111:       className
112:     )}
113:     {...props}
114:   >
115:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
116:       <SelectPrimitive.ItemIndicator>
117:         <Check className="h-4 w-4" />
118:       </SelectPrimitive.ItemIndicator>
119:     </span>
120:     <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
121:   </SelectPrimitive.Item>
122: ))
123: SelectItem.displayName = SelectPrimitive.Item.displayName
124: const SelectSeparator = React.forwardRef<
125:   React.ElementRef<typeof SelectPrimitive.Separator>,
126:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
127: >(({ className, ...props }, ref) => (
128:   <SelectPrimitive.Separator
129:     ref={ref}
130:     className={cn("-mx-1 my-1 h-px bg-muted", className)}
131:     {...props}
132:   />
133: ))
134: SelectSeparator.displayName = SelectPrimitive.Separator.displayName
135: export {
136:   Select,
137:   SelectGroup,
138:   SelectValue,
139:   SelectTrigger,
140:   SelectContent,
141:   SelectLabel,
142:   SelectItem,
143:   SelectSeparator,
144:   SelectScrollUpButton,
145:   SelectScrollDownButton,
146: }
</file>

<file path="components/ui/separator.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as SeparatorPrimitive from "@radix-ui/react-separator"
 4: import { cn } from "@/lib/utils"
 5: const Separator = React.forwardRef<
 6:   React.ElementRef<typeof SeparatorPrimitive.Root>,
 7:   React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
 8: >(
 9:   (
10:     { className, orientation = "horizontal", decorative = true, ...props },
11:     ref
12:   ) => (
13:     <SeparatorPrimitive.Root
14:       ref={ref}
15:       decorative={decorative}
16:       orientation={orientation}
17:       className={cn(
18:         "shrink-0 bg-border",
19:         orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
20:         className
21:       )}
22:       {...props}
23:     />
24:   )
25: )
26: Separator.displayName = SeparatorPrimitive.Root.displayName
27: export { Separator }
</file>

<file path="components/ui/sheet.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as SheetPrimitive from "@radix-ui/react-dialog"
  4: import { cva, type VariantProps } from "class-variance-authority"
  5: import { X } from "lucide-react"
  6: import { cn } from "@/lib/utils"
  7: const Sheet = SheetPrimitive.Root
  8: const SheetTrigger = SheetPrimitive.Trigger
  9: const SheetClose = SheetPrimitive.Close
 10: const SheetPortal = SheetPrimitive.Portal
 11: const SheetOverlay = React.forwardRef<
 12:   React.ElementRef<typeof SheetPrimitive.Overlay>,
 13:   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
 14: >(({ className, ...props }, ref) => (
 15:   <SheetPrimitive.Overlay
 16:     className={cn(
 17:       "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
 18:       className
 19:     )}
 20:     {...props}
 21:     ref={ref}
 22:   />
 23: ))
 24: SheetOverlay.displayName = SheetPrimitive.Overlay.displayName
 25: const sheetVariants = cva(
 26:   "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
 27:   {
 28:     variants: {
 29:       side: {
 30:         top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
 31:         bottom:
 32:           "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
 33:         left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
 34:         right:
 35:           "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
 36:       },
 37:     },
 38:     defaultVariants: {
 39:       side: "right",
 40:     },
 41:   }
 42: )
 43: interface SheetContentProps
 44:   extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
 45:     VariantProps<typeof sheetVariants> {}
 46: const SheetContent = React.forwardRef<
 47:   React.ElementRef<typeof SheetPrimitive.Content>,
 48:   SheetContentProps
 49: >(({ side = "right", className, children, ...props }, ref) => (
 50:   <SheetPortal>
 51:     <SheetOverlay />
 52:     <SheetPrimitive.Content
 53:       ref={ref}
 54:       className={cn(sheetVariants({ side }), className)}
 55:       {...props}
 56:     >
 57:       {children}
 58:       <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
 59:         <X className="h-4 w-4" />
 60:         <span className="sr-only">Close</span>
 61:       </SheetPrimitive.Close>
 62:     </SheetPrimitive.Content>
 63:   </SheetPortal>
 64: ))
 65: SheetContent.displayName = SheetPrimitive.Content.displayName
 66: const SheetHeader = ({
 67:   className,
 68:   ...props
 69: }: React.HTMLAttributes<HTMLDivElement>) => (
 70:   <div
 71:     className={cn(
 72:       "flex flex-col space-y-2 text-center sm:text-left",
 73:       className
 74:     )}
 75:     {...props}
 76:   />
 77: )
 78: SheetHeader.displayName = "SheetHeader"
 79: const SheetFooter = ({
 80:   className,
 81:   ...props
 82: }: React.HTMLAttributes<HTMLDivElement>) => (
 83:   <div
 84:     className={cn(
 85:       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
 86:       className
 87:     )}
 88:     {...props}
 89:   />
 90: )
 91: SheetFooter.displayName = "SheetFooter"
 92: const SheetTitle = React.forwardRef<
 93:   React.ElementRef<typeof SheetPrimitive.Title>,
 94:   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
 95: >(({ className, ...props }, ref) => (
 96:   <SheetPrimitive.Title
 97:     ref={ref}
 98:     className={cn("text-lg font-semibold text-foreground", className)}
 99:     {...props}
100:   />
101: ))
102: SheetTitle.displayName = SheetPrimitive.Title.displayName
103: const SheetDescription = React.forwardRef<
104:   React.ElementRef<typeof SheetPrimitive.Description>,
105:   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
106: >(({ className, ...props }, ref) => (
107:   <SheetPrimitive.Description
108:     ref={ref}
109:     className={cn("text-sm text-muted-foreground", className)}
110:     {...props}
111:   />
112: ))
113: SheetDescription.displayName = SheetPrimitive.Description.displayName
114: export {
115:   Sheet,
116:   SheetPortal,
117:   SheetOverlay,
118:   SheetTrigger,
119:   SheetClose,
120:   SheetContent,
121:   SheetHeader,
122:   SheetFooter,
123:   SheetTitle,
124:   SheetDescription,
125: }
</file>

<file path="components/ui/sidebar.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import { Slot } from "@radix-ui/react-slot"
  4: import { VariantProps, cva } from "class-variance-authority"
  5: import { PanelLeft } from "lucide-react"
  6: import { useIsMobile } from "@/hooks/use-mobile"
  7: import { cn } from "@/lib/utils"
  8: import { Button } from "@/components/ui/button"
  9: import { Input } from "@/components/ui/input"
 10: import { Separator } from "@/components/ui/separator"
 11: import { Sheet, SheetContent } from "@/components/ui/sheet"
 12: import { Skeleton } from "@/components/ui/skeleton"
 13: import {
 14:   Tooltip,
 15:   TooltipContent,
 16:   TooltipProvider,
 17:   TooltipTrigger,
 18: } from "@/components/ui/tooltip"
 19: const SIDEBAR_COOKIE_NAME = "sidebar:state"
 20: const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
 21: const SIDEBAR_WIDTH = "16rem"
 22: const SIDEBAR_WIDTH_MOBILE = "18rem"
 23: const SIDEBAR_WIDTH_ICON = "3rem"
 24: const SIDEBAR_KEYBOARD_SHORTCUT = "b"
 25: type SidebarContext = {
 26:   state: "expanded" | "collapsed"
 27:   open: boolean
 28:   setOpen: (open: boolean) => void
 29:   openMobile: boolean
 30:   setOpenMobile: (open: boolean) => void
 31:   isMobile: boolean
 32:   toggleSidebar: () => void
 33: }
 34: const SidebarContext = React.createContext<SidebarContext | null>(null)
 35: function useSidebar() {
 36:   const context = React.useContext(SidebarContext)
 37:   if (!context) {
 38:     throw new Error("useSidebar must be used within a SidebarProvider.")
 39:   }
 40:   return context
 41: }
 42: const SidebarProvider = React.forwardRef<
 43:   HTMLDivElement,
 44:   React.ComponentProps<"div"> & {
 45:     defaultOpen?: boolean
 46:     open?: boolean
 47:     onOpenChange?: (open: boolean) => void
 48:   }
 49: >(
 50:   (
 51:     {
 52:       defaultOpen = true,
 53:       open: openProp,
 54:       onOpenChange: setOpenProp,
 55:       className,
 56:       style,
 57:       children,
 58:       ...props
 59:     },
 60:     ref
 61:   ) => {
 62:     const isMobile = useIsMobile()
 63:     const [openMobile, setOpenMobile] = React.useState(false)
 64:     // This is the internal state of the sidebar.
 65:     // We use openProp and setOpenProp for control from outside the component.
 66:     const [_open, _setOpen] = React.useState(defaultOpen)
 67:     const open = openProp ?? _open
 68:     const setOpen = React.useCallback(
 69:       (value: boolean | ((value: boolean) => boolean)) => {
 70:         const openState = typeof value === "function" ? value(open) : value
 71:         if (setOpenProp) {
 72:           setOpenProp(openState)
 73:         } else {
 74:           _setOpen(openState)
 75:         }
 76:         // This sets the cookie to keep the sidebar state.
 77:         document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
 78:       },
 79:       [setOpenProp, open]
 80:     )
 81:     // Helper to toggle the sidebar.
 82:     const toggleSidebar = React.useCallback(() => {
 83:       return isMobile
 84:         ? setOpenMobile((open) => !open)
 85:         : setOpen((open) => !open)
 86:     }, [isMobile, setOpen, setOpenMobile])
 87:     // Adds a keyboard shortcut to toggle the sidebar.
 88:     React.useEffect(() => {
 89:       const handleKeyDown = (event: KeyboardEvent) => {
 90:         if (
 91:           event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
 92:           (event.metaKey || event.ctrlKey)
 93:         ) {
 94:           event.preventDefault()
 95:           toggleSidebar()
 96:         }
 97:       }
 98:       window.addEventListener("keydown", handleKeyDown)
 99:       return () => window.removeEventListener("keydown", handleKeyDown)
100:     }, [toggleSidebar])
101:     // We add a state so that we can do data-state="expanded" or "collapsed".
102:     // This makes it easier to style the sidebar with Tailwind classes.
103:     const state = open ? "expanded" : "collapsed"
104:     const contextValue = React.useMemo<SidebarContext>(
105:       () => ({
106:         state,
107:         open,
108:         setOpen,
109:         isMobile,
110:         openMobile,
111:         setOpenMobile,
112:         toggleSidebar,
113:       }),
114:       [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
115:     )
116:     return (
117:       <SidebarContext.Provider value={contextValue}>
118:         <TooltipProvider delayDuration={0}>
119:           <div
120:             style={
121:               {
122:                 "--sidebar-width": SIDEBAR_WIDTH,
123:                 "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
124:                 ...style,
125:               } as React.CSSProperties
126:             }
127:             className={cn(
128:               "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
129:               className
130:             )}
131:             ref={ref}
132:             {...props}
133:           >
134:             {children}
135:           </div>
136:         </TooltipProvider>
137:       </SidebarContext.Provider>
138:     )
139:   }
140: )
141: SidebarProvider.displayName = "SidebarProvider"
142: const Sidebar = React.forwardRef<
143:   HTMLDivElement,
144:   React.ComponentProps<"div"> & {
145:     side?: "left" | "right"
146:     variant?: "sidebar" | "floating" | "inset"
147:     collapsible?: "offcanvas" | "icon" | "none"
148:   }
149: >(
150:   (
151:     {
152:       side = "left",
153:       variant = "sidebar",
154:       collapsible = "offcanvas",
155:       className,
156:       children,
157:       ...props
158:     },
159:     ref
160:   ) => {
161:     const { isMobile, state, openMobile, setOpenMobile } = useSidebar()
162:     if (collapsible === "none") {
163:       return (
164:         <div
165:           className={cn(
166:             "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
167:             className
168:           )}
169:           ref={ref}
170:           {...props}
171:         >
172:           {children}
173:         </div>
174:       )
175:     }
176:     if (isMobile) {
177:       return (
178:         <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
179:           <SheetContent
180:             data-sidebar="sidebar"
181:             data-mobile="true"
182:             className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
183:             style={
184:               {
185:                 "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
186:               } as React.CSSProperties
187:             }
188:             side={side}
189:           >
190:             <div className="flex h-full w-full flex-col">{children}</div>
191:           </SheetContent>
192:         </Sheet>
193:       )
194:     }
195:     return (
196:       <div
197:         ref={ref}
198:         className="group peer hidden md:block text-sidebar-foreground"
199:         data-state={state}
200:         data-collapsible={state === "collapsed" ? collapsible : ""}
201:         data-variant={variant}
202:         data-side={side}
203:       >
204:         {/* This is what handles the sidebar gap on desktop */}
205:         <div
206:           className={cn(
207:             "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
208:             "group-data-[collapsible=offcanvas]:w-0",
209:             "group-data-[side=right]:rotate-180",
210:             variant === "floating" || variant === "inset"
211:               ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
212:               : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
213:           )}
214:         />
215:         <div
216:           className={cn(
217:             "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
218:             side === "left"
219:               ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
220:               : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
221:             // Adjust the padding for floating and inset variants.
222:             variant === "floating" || variant === "inset"
223:               ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
224:               : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
225:             className
226:           )}
227:           {...props}
228:         >
229:           <div
230:             data-sidebar="sidebar"
231:             className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
232:           >
233:             {children}
234:           </div>
235:         </div>
236:       </div>
237:     )
238:   }
239: )
240: Sidebar.displayName = "Sidebar"
241: const SidebarTrigger = React.forwardRef<
242:   React.ElementRef<typeof Button>,
243:   React.ComponentProps<typeof Button>
244: >(({ className, onClick, ...props }, ref) => {
245:   const { toggleSidebar } = useSidebar()
246:   return (
247:     <Button
248:       ref={ref}
249:       data-sidebar="trigger"
250:       variant="ghost"
251:       size="icon"
252:       className={cn("h-7 w-7", className)}
253:       onClick={(event) => {
254:         onClick?.(event)
255:         toggleSidebar()
256:       }}
257:       {...props}
258:     >
259:       <PanelLeft />
260:       <span className="sr-only">Toggle Sidebar</span>
261:     </Button>
262:   )
263: })
264: SidebarTrigger.displayName = "SidebarTrigger"
265: const SidebarRail = React.forwardRef<
266:   HTMLButtonElement,
267:   React.ComponentProps<"button">
268: >(({ className, ...props }, ref) => {
269:   const { toggleSidebar } = useSidebar()
270:   return (
271:     <button
272:       ref={ref}
273:       data-sidebar="rail"
274:       aria-label="Toggle Sidebar"
275:       tabIndex={-1}
276:       onClick={toggleSidebar}
277:       title="Toggle Sidebar"
278:       className={cn(
279:         "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
280:         "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
281:         "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
282:         "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
283:         "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
284:         "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
285:         className
286:       )}
287:       {...props}
288:     />
289:   )
290: })
291: SidebarRail.displayName = "SidebarRail"
292: const SidebarInset = React.forwardRef<
293:   HTMLDivElement,
294:   React.ComponentProps<"main">
295: >(({ className, ...props }, ref) => {
296:   return (
297:     <main
298:       ref={ref}
299:       className={cn(
300:         "relative flex min-h-svh flex-1 flex-col bg-background",
301:         "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
302:         className
303:       )}
304:       {...props}
305:     />
306:   )
307: })
308: SidebarInset.displayName = "SidebarInset"
309: const SidebarInput = React.forwardRef<
310:   React.ElementRef<typeof Input>,
311:   React.ComponentProps<typeof Input>
312: >(({ className, ...props }, ref) => {
313:   return (
314:     <Input
315:       ref={ref}
316:       data-sidebar="input"
317:       className={cn(
318:         "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
319:         className
320:       )}
321:       {...props}
322:     />
323:   )
324: })
325: SidebarInput.displayName = "SidebarInput"
326: const SidebarHeader = React.forwardRef<
327:   HTMLDivElement,
328:   React.ComponentProps<"div">
329: >(({ className, ...props }, ref) => {
330:   return (
331:     <div
332:       ref={ref}
333:       data-sidebar="header"
334:       className={cn("flex flex-col gap-2 p-2", className)}
335:       {...props}
336:     />
337:   )
338: })
339: SidebarHeader.displayName = "SidebarHeader"
340: const SidebarFooter = React.forwardRef<
341:   HTMLDivElement,
342:   React.ComponentProps<"div">
343: >(({ className, ...props }, ref) => {
344:   return (
345:     <div
346:       ref={ref}
347:       data-sidebar="footer"
348:       className={cn("flex flex-col gap-2 p-2", className)}
349:       {...props}
350:     />
351:   )
352: })
353: SidebarFooter.displayName = "SidebarFooter"
354: const SidebarSeparator = React.forwardRef<
355:   React.ElementRef<typeof Separator>,
356:   React.ComponentProps<typeof Separator>
357: >(({ className, ...props }, ref) => {
358:   return (
359:     <Separator
360:       ref={ref}
361:       data-sidebar="separator"
362:       className={cn("mx-2 w-auto bg-sidebar-border", className)}
363:       {...props}
364:     />
365:   )
366: })
367: SidebarSeparator.displayName = "SidebarSeparator"
368: const SidebarContent = React.forwardRef<
369:   HTMLDivElement,
370:   React.ComponentProps<"div">
371: >(({ className, ...props }, ref) => {
372:   return (
373:     <div
374:       ref={ref}
375:       data-sidebar="content"
376:       className={cn(
377:         "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
378:         className
379:       )}
380:       {...props}
381:     />
382:   )
383: })
384: SidebarContent.displayName = "SidebarContent"
385: const SidebarGroup = React.forwardRef<
386:   HTMLDivElement,
387:   React.ComponentProps<"div">
388: >(({ className, ...props }, ref) => {
389:   return (
390:     <div
391:       ref={ref}
392:       data-sidebar="group"
393:       className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
394:       {...props}
395:     />
396:   )
397: })
398: SidebarGroup.displayName = "SidebarGroup"
399: const SidebarGroupLabel = React.forwardRef<
400:   HTMLDivElement,
401:   React.ComponentProps<"div"> & { asChild?: boolean }
402: >(({ className, asChild = false, ...props }, ref) => {
403:   const Comp = asChild ? Slot : "div"
404:   return (
405:     <Comp
406:       ref={ref}
407:       data-sidebar="group-label"
408:       className={cn(
409:         "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
410:         "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
411:         className
412:       )}
413:       {...props}
414:     />
415:   )
416: })
417: SidebarGroupLabel.displayName = "SidebarGroupLabel"
418: const SidebarGroupAction = React.forwardRef<
419:   HTMLButtonElement,
420:   React.ComponentProps<"button"> & { asChild?: boolean }
421: >(({ className, asChild = false, ...props }, ref) => {
422:   const Comp = asChild ? Slot : "button"
423:   return (
424:     <Comp
425:       ref={ref}
426:       data-sidebar="group-action"
427:       className={cn(
428:         "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
429:         // Increases the hit area of the button on mobile.
430:         "after:absolute after:-inset-2 after:md:hidden",
431:         "group-data-[collapsible=icon]:hidden",
432:         className
433:       )}
434:       {...props}
435:     />
436:   )
437: })
438: SidebarGroupAction.displayName = "SidebarGroupAction"
439: const SidebarGroupContent = React.forwardRef<
440:   HTMLDivElement,
441:   React.ComponentProps<"div">
442: >(({ className, ...props }, ref) => (
443:   <div
444:     ref={ref}
445:     data-sidebar="group-content"
446:     className={cn("w-full text-sm", className)}
447:     {...props}
448:   />
449: ))
450: SidebarGroupContent.displayName = "SidebarGroupContent"
451: const SidebarMenu = React.forwardRef<
452:   HTMLUListElement,
453:   React.ComponentProps<"ul">
454: >(({ className, ...props }, ref) => (
455:   <ul
456:     ref={ref}
457:     data-sidebar="menu"
458:     className={cn("flex w-full min-w-0 flex-col gap-1", className)}
459:     {...props}
460:   />
461: ))
462: SidebarMenu.displayName = "SidebarMenu"
463: const SidebarMenuItem = React.forwardRef<
464:   HTMLLIElement,
465:   React.ComponentProps<"li">
466: >(({ className, ...props }, ref) => (
467:   <li
468:     ref={ref}
469:     data-sidebar="menu-item"
470:     className={cn("group/menu-item relative", className)}
471:     {...props}
472:   />
473: ))
474: SidebarMenuItem.displayName = "SidebarMenuItem"
475: const sidebarMenuButtonVariants = cva(
476:   "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
477:   {
478:     variants: {
479:       variant: {
480:         default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
481:         outline:
482:           "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
483:       },
484:       size: {
485:         default: "h-8 text-sm",
486:         sm: "h-7 text-xs",
487:         lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
488:       },
489:     },
490:     defaultVariants: {
491:       variant: "default",
492:       size: "default",
493:     },
494:   }
495: )
496: const SidebarMenuButton = React.forwardRef<
497:   HTMLButtonElement,
498:   React.ComponentProps<"button"> & {
499:     asChild?: boolean
500:     isActive?: boolean
501:     tooltip?: string | React.ComponentProps<typeof TooltipContent>
502:   } & VariantProps<typeof sidebarMenuButtonVariants>
503: >(
504:   (
505:     {
506:       asChild = false,
507:       isActive = false,
508:       variant = "default",
509:       size = "default",
510:       tooltip,
511:       className,
512:       ...props
513:     },
514:     ref
515:   ) => {
516:     const Comp = asChild ? Slot : "button"
517:     const { isMobile, state } = useSidebar()
518:     const button = (
519:       <Comp
520:         ref={ref}
521:         data-sidebar="menu-button"
522:         data-size={size}
523:         data-active={isActive}
524:         className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
525:         {...props}
526:       />
527:     )
528:     if (!tooltip) {
529:       return button
530:     }
531:     if (typeof tooltip === "string") {
532:       tooltip = {
533:         children: tooltip,
534:       }
535:     }
536:     return (
537:       <Tooltip>
538:         <TooltipTrigger asChild>{button}</TooltipTrigger>
539:         <TooltipContent
540:           side="right"
541:           align="center"
542:           hidden={state !== "collapsed" || isMobile}
543:           {...tooltip}
544:         />
545:       </Tooltip>
546:     )
547:   }
548: )
549: SidebarMenuButton.displayName = "SidebarMenuButton"
550: const SidebarMenuAction = React.forwardRef<
551:   HTMLButtonElement,
552:   React.ComponentProps<"button"> & {
553:     asChild?: boolean
554:     showOnHover?: boolean
555:   }
556: >(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
557:   const Comp = asChild ? Slot : "button"
558:   return (
559:     <Comp
560:       ref={ref}
561:       data-sidebar="menu-action"
562:       className={cn(
563:         "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
564:         // Increases the hit area of the button on mobile.
565:         "after:absolute after:-inset-2 after:md:hidden",
566:         "peer-data-[size=sm]/menu-button:top-1",
567:         "peer-data-[size=default]/menu-button:top-1.5",
568:         "peer-data-[size=lg]/menu-button:top-2.5",
569:         "group-data-[collapsible=icon]:hidden",
570:         showOnHover &&
571:           "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
572:         className
573:       )}
574:       {...props}
575:     />
576:   )
577: })
578: SidebarMenuAction.displayName = "SidebarMenuAction"
579: const SidebarMenuBadge = React.forwardRef<
580:   HTMLDivElement,
581:   React.ComponentProps<"div">
582: >(({ className, ...props }, ref) => (
583:   <div
584:     ref={ref}
585:     data-sidebar="menu-badge"
586:     className={cn(
587:       "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
588:       "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
589:       "peer-data-[size=sm]/menu-button:top-1",
590:       "peer-data-[size=default]/menu-button:top-1.5",
591:       "peer-data-[size=lg]/menu-button:top-2.5",
592:       "group-data-[collapsible=icon]:hidden",
593:       className
594:     )}
595:     {...props}
596:   />
597: ))
598: SidebarMenuBadge.displayName = "SidebarMenuBadge"
599: const SidebarMenuSkeleton = React.forwardRef<
600:   HTMLDivElement,
601:   React.ComponentProps<"div"> & {
602:     showIcon?: boolean
603:   }
604: >(({ className, showIcon = false, ...props }, ref) => {
605:   // Random width between 50 to 90%.
606:   const width = React.useMemo(() => {
607:     return `${Math.floor(Math.random() * 40) + 50}%`
608:   }, [])
609:   return (
610:     <div
611:       ref={ref}
612:       data-sidebar="menu-skeleton"
613:       className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
614:       {...props}
615:     >
616:       {showIcon && (
617:         <Skeleton
618:           className="size-4 rounded-md"
619:           data-sidebar="menu-skeleton-icon"
620:         />
621:       )}
622:       <Skeleton
623:         className="h-4 flex-1 max-w-[--skeleton-width]"
624:         data-sidebar="menu-skeleton-text"
625:         style={
626:           {
627:             "--skeleton-width": width,
628:           } as React.CSSProperties
629:         }
630:       />
631:     </div>
632:   )
633: })
634: SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"
635: const SidebarMenuSub = React.forwardRef<
636:   HTMLUListElement,
637:   React.ComponentProps<"ul">
638: >(({ className, ...props }, ref) => (
639:   <ul
640:     ref={ref}
641:     data-sidebar="menu-sub"
642:     className={cn(
643:       "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
644:       "group-data-[collapsible=icon]:hidden",
645:       className
646:     )}
647:     {...props}
648:   />
649: ))
650: SidebarMenuSub.displayName = "SidebarMenuSub"
651: const SidebarMenuSubItem = React.forwardRef<
652:   HTMLLIElement,
653:   React.ComponentProps<"li">
654: >(({ ...props }, ref) => <li ref={ref} {...props} />)
655: SidebarMenuSubItem.displayName = "SidebarMenuSubItem"
656: const SidebarMenuSubButton = React.forwardRef<
657:   HTMLAnchorElement,
658:   React.ComponentProps<"a"> & {
659:     asChild?: boolean
660:     size?: "sm" | "md"
661:     isActive?: boolean
662:   }
663: >(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
664:   const Comp = asChild ? Slot : "a"
665:   return (
666:     <Comp
667:       ref={ref}
668:       data-sidebar="menu-sub-button"
669:       data-size={size}
670:       data-active={isActive}
671:       className={cn(
672:         "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
673:         "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
674:         size === "sm" && "text-xs",
675:         size === "md" && "text-sm",
676:         "group-data-[collapsible=icon]:hidden",
677:         className
678:       )}
679:       {...props}
680:     />
681:   )
682: })
683: SidebarMenuSubButton.displayName = "SidebarMenuSubButton"
684: export {
685:   Sidebar,
686:   SidebarContent,
687:   SidebarFooter,
688:   SidebarGroup,
689:   SidebarGroupAction,
690:   SidebarGroupContent,
691:   SidebarGroupLabel,
692:   SidebarHeader,
693:   SidebarInput,
694:   SidebarInset,
695:   SidebarMenu,
696:   SidebarMenuAction,
697:   SidebarMenuBadge,
698:   SidebarMenuButton,
699:   SidebarMenuItem,
700:   SidebarMenuSkeleton,
701:   SidebarMenuSub,
702:   SidebarMenuSubButton,
703:   SidebarMenuSubItem,
704:   SidebarProvider,
705:   SidebarRail,
706:   SidebarSeparator,
707:   SidebarTrigger,
708:   useSidebar,
709: }
</file>

<file path="components/ui/skeleton.tsx">
 1: import { cn } from "@/lib/utils"
 2: function Skeleton({
 3:   className,
 4:   ...props
 5: }: React.HTMLAttributes<HTMLDivElement>) {
 6:   return (
 7:     <div
 8:       className={cn("animate-pulse rounded-md bg-muted", className)}
 9:       {...props}
10:     />
11:   )
12: }
13: export { Skeleton }
</file>

<file path="components/ui/slider.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as SliderPrimitive from "@radix-ui/react-slider"
 4: import { cn } from "@/lib/utils"
 5: const Slider = React.forwardRef<
 6:   React.ElementRef<typeof SliderPrimitive.Root>,
 7:   React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
 8: >(({ className, ...props }, ref) => (
 9:   <SliderPrimitive.Root
10:     ref={ref}
11:     className={cn(
12:       "relative flex w-full touch-none select-none items-center",
13:       className
14:     )}
15:     {...props}
16:   >
17:     <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
18:       <SliderPrimitive.Range className="absolute h-full bg-primary" />
19:     </SliderPrimitive.Track>
20:     <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
21:   </SliderPrimitive.Root>
22: ))
23: Slider.displayName = SliderPrimitive.Root.displayName
24: export { Slider }
</file>

<file path="components/ui/sonner.tsx">
 1: "use client"
 2: import { useTheme } from "next-themes"
 3: import { Toaster as Sonner } from "sonner"
 4: type ToasterProps = React.ComponentProps<typeof Sonner>
 5: const Toaster = ({ ...props }: ToasterProps) => {
 6:   const { theme = "system" } = useTheme()
 7:   return (
 8:     <Sonner
 9:       theme={theme as ToasterProps["theme"]}
10:       className="toaster group"
11:       toastOptions={{
12:         classNames: {
13:           toast:
14:             "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
15:           description: "group-[.toast]:text-muted-foreground",
16:           actionButton:
17:             "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
18:           cancelButton:
19:             "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
20:         },
21:       }}
22:       {...props}
23:     />
24:   )
25: }
26: export { Toaster }
</file>

<file path="components/ui/switch.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as SwitchPrimitives from "@radix-ui/react-switch"
 4: import { cn } from "@/lib/utils"
 5: const Switch = React.forwardRef<
 6:   React.ElementRef<typeof SwitchPrimitives.Root>,
 7:   React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
 8: >(({ className, ...props }, ref) => (
 9:   <SwitchPrimitives.Root
10:     className={cn(
11:       "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
12:       className
13:     )}
14:     {...props}
15:     ref={ref}
16:   >
17:     <SwitchPrimitives.Thumb
18:       className={cn(
19:         "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
20:       )}
21:     />
22:   </SwitchPrimitives.Root>
23: ))
24: Switch.displayName = SwitchPrimitives.Root.displayName
25: export { Switch }
</file>

<file path="components/ui/table.tsx">
  1: import * as React from "react"
  2: import { cn } from "@/lib/utils"
  3: const Table = React.forwardRef<
  4:   HTMLTableElement,
  5:   React.HTMLAttributes<HTMLTableElement>
  6: >(({ className, ...props }, ref) => (
  7:   <div className="relative w-full overflow-auto">
  8:     <table
  9:       ref={ref}
 10:       className={cn("w-full caption-bottom text-sm", className)}
 11:       {...props}
 12:     />
 13:   </div>
 14: ))
 15: Table.displayName = "Table"
 16: const TableHeader = React.forwardRef<
 17:   HTMLTableSectionElement,
 18:   React.HTMLAttributes<HTMLTableSectionElement>
 19: >(({ className, ...props }, ref) => (
 20:   <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
 21: ))
 22: TableHeader.displayName = "TableHeader"
 23: const TableBody = React.forwardRef<
 24:   HTMLTableSectionElement,
 25:   React.HTMLAttributes<HTMLTableSectionElement>
 26: >(({ className, ...props }, ref) => (
 27:   <tbody
 28:     ref={ref}
 29:     className={cn("[&_tr:last-child]:border-0", className)}
 30:     {...props}
 31:   />
 32: ))
 33: TableBody.displayName = "TableBody"
 34: const TableFooter = React.forwardRef<
 35:   HTMLTableSectionElement,
 36:   React.HTMLAttributes<HTMLTableSectionElement>
 37: >(({ className, ...props }, ref) => (
 38:   <tfoot
 39:     ref={ref}
 40:     className={cn(
 41:       "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
 42:       className
 43:     )}
 44:     {...props}
 45:   />
 46: ))
 47: TableFooter.displayName = "TableFooter"
 48: const TableRow = React.forwardRef<
 49:   HTMLTableRowElement,
 50:   React.HTMLAttributes<HTMLTableRowElement>
 51: >(({ className, ...props }, ref) => (
 52:   <tr
 53:     ref={ref}
 54:     className={cn(
 55:       "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
 56:       className
 57:     )}
 58:     {...props}
 59:   />
 60: ))
 61: TableRow.displayName = "TableRow"
 62: const TableHead = React.forwardRef<
 63:   HTMLTableCellElement,
 64:   React.ThHTMLAttributes<HTMLTableCellElement>
 65: >(({ className, ...props }, ref) => (
 66:   <th
 67:     ref={ref}
 68:     className={cn(
 69:       "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
 70:       className
 71:     )}
 72:     {...props}
 73:   />
 74: ))
 75: TableHead.displayName = "TableHead"
 76: const TableCell = React.forwardRef<
 77:   HTMLTableCellElement,
 78:   React.TdHTMLAttributes<HTMLTableCellElement>
 79: >(({ className, ...props }, ref) => (
 80:   <td
 81:     ref={ref}
 82:     className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
 83:     {...props}
 84:   />
 85: ))
 86: TableCell.displayName = "TableCell"
 87: const TableCaption = React.forwardRef<
 88:   HTMLTableCaptionElement,
 89:   React.HTMLAttributes<HTMLTableCaptionElement>
 90: >(({ className, ...props }, ref) => (
 91:   <caption
 92:     ref={ref}
 93:     className={cn("mt-4 text-sm text-muted-foreground", className)}
 94:     {...props}
 95:   />
 96: ))
 97: TableCaption.displayName = "TableCaption"
 98: export {
 99:   Table,
100:   TableHeader,
101:   TableBody,
102:   TableFooter,
103:   TableHead,
104:   TableRow,
105:   TableCell,
106:   TableCaption,
107: }
</file>

<file path="components/ui/tabs.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as TabsPrimitive from "@radix-ui/react-tabs"
 4: import { cn } from "@/lib/utils"
 5: const Tabs = TabsPrimitive.Root
 6: const TabsList = React.forwardRef<
 7:   React.ElementRef<typeof TabsPrimitive.List>,
 8:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
 9: >(({ className, ...props }, ref) => (
10:   <TabsPrimitive.List
11:     ref={ref}
12:     className={cn(
13:       "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
14:       className
15:     )}
16:     {...props}
17:   />
18: ))
19: TabsList.displayName = TabsPrimitive.List.displayName
20: const TabsTrigger = React.forwardRef<
21:   React.ElementRef<typeof TabsPrimitive.Trigger>,
22:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
23: >(({ className, ...props }, ref) => (
24:   <TabsPrimitive.Trigger
25:     ref={ref}
26:     className={cn(
27:       "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
28:       className
29:     )}
30:     {...props}
31:   />
32: ))
33: TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
34: const TabsContent = React.forwardRef<
35:   React.ElementRef<typeof TabsPrimitive.Content>,
36:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
37: >(({ className, ...props }, ref) => (
38:   <TabsPrimitive.Content
39:     ref={ref}
40:     className={cn(
41:       "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
42:       className
43:     )}
44:     {...props}
45:   />
46: ))
47: TabsContent.displayName = TabsPrimitive.Content.displayName
48: export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
 1: import * as React from "react"
 2: import { cn } from "@/lib/utils"
 3: const Textarea = React.forwardRef<
 4:   HTMLTextAreaElement,
 5:   React.ComponentProps<"textarea">
 6: >(({ className, ...props }, ref) => {
 7:   return (
 8:     <textarea
 9:       className={cn(
10:         "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
11:         className
12:       )}
13:       ref={ref}
14:       {...props}
15:     />
16:   )
17: })
18: Textarea.displayName = "Textarea"
19: export { Textarea }
</file>

<file path="components/ui/toast.tsx">
  1: "use client"
  2: import * as React from "react"
  3: import * as ToastPrimitives from "@radix-ui/react-toast"
  4: import { cva, type VariantProps } from "class-variance-authority"
  5: import { X } from "lucide-react"
  6: import { cn } from "@/lib/utils"
  7: const ToastProvider = ToastPrimitives.Provider
  8: const ToastViewport = React.forwardRef<
  9:   React.ElementRef<typeof ToastPrimitives.Viewport>,
 10:   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
 11: >(({ className, ...props }, ref) => (
 12:   <ToastPrimitives.Viewport
 13:     ref={ref}
 14:     className={cn(
 15:       "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
 16:       className
 17:     )}
 18:     {...props}
 19:   />
 20: ))
 21: ToastViewport.displayName = ToastPrimitives.Viewport.displayName
 22: const toastVariants = cva(
 23:   "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
 24:   {
 25:     variants: {
 26:       variant: {
 27:         default: "border bg-background text-foreground",
 28:         destructive:
 29:           "destructive group border-destructive bg-destructive text-destructive-foreground",
 30:       },
 31:     },
 32:     defaultVariants: {
 33:       variant: "default",
 34:     },
 35:   }
 36: )
 37: const Toast = React.forwardRef<
 38:   React.ElementRef<typeof ToastPrimitives.Root>,
 39:   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
 40:     VariantProps<typeof toastVariants>
 41: >(({ className, variant, ...props }, ref) => {
 42:   return (
 43:     <ToastPrimitives.Root
 44:       ref={ref}
 45:       className={cn(toastVariants({ variant }), className)}
 46:       {...props}
 47:     />
 48:   )
 49: })
 50: Toast.displayName = ToastPrimitives.Root.displayName
 51: const ToastAction = React.forwardRef<
 52:   React.ElementRef<typeof ToastPrimitives.Action>,
 53:   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
 54: >(({ className, ...props }, ref) => (
 55:   <ToastPrimitives.Action
 56:     ref={ref}
 57:     className={cn(
 58:       "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
 59:       className
 60:     )}
 61:     {...props}
 62:   />
 63: ))
 64: ToastAction.displayName = ToastPrimitives.Action.displayName
 65: const ToastClose = React.forwardRef<
 66:   React.ElementRef<typeof ToastPrimitives.Close>,
 67:   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
 68: >(({ className, ...props }, ref) => (
 69:   <ToastPrimitives.Close
 70:     ref={ref}
 71:     className={cn(
 72:       "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
 73:       className
 74:     )}
 75:     toast-close=""
 76:     {...props}
 77:   >
 78:     <X className="h-4 w-4" />
 79:   </ToastPrimitives.Close>
 80: ))
 81: ToastClose.displayName = ToastPrimitives.Close.displayName
 82: const ToastTitle = React.forwardRef<
 83:   React.ElementRef<typeof ToastPrimitives.Title>,
 84:   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
 85: >(({ className, ...props }, ref) => (
 86:   <ToastPrimitives.Title
 87:     ref={ref}
 88:     className={cn("text-sm font-semibold", className)}
 89:     {...props}
 90:   />
 91: ))
 92: ToastTitle.displayName = ToastPrimitives.Title.displayName
 93: const ToastDescription = React.forwardRef<
 94:   React.ElementRef<typeof ToastPrimitives.Description>,
 95:   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
 96: >(({ className, ...props }, ref) => (
 97:   <ToastPrimitives.Description
 98:     ref={ref}
 99:     className={cn("text-sm opacity-90", className)}
100:     {...props}
101:   />
102: ))
103: ToastDescription.displayName = ToastPrimitives.Description.displayName
104: type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>
105: type ToastActionElement = React.ReactElement<typeof ToastAction>
106: export {
107:   type ToastProps,
108:   type ToastActionElement,
109:   ToastProvider,
110:   ToastViewport,
111:   Toast,
112:   ToastTitle,
113:   ToastDescription,
114:   ToastClose,
115:   ToastAction,
116: }
</file>

<file path="components/ui/toaster.tsx">
 1: "use client"
 2: import { useToast } from "@/hooks/use-toast"
 3: import {
 4:   Toast,
 5:   ToastClose,
 6:   ToastDescription,
 7:   ToastProvider,
 8:   ToastTitle,
 9:   ToastViewport,
10: } from "@/components/ui/toast"
11: export function Toaster() {
12:   const { toasts } = useToast()
13:   return (
14:     <ToastProvider>
15:       {toasts.map(function ({ id, title, description, action, ...props }) {
16:         return (
17:           <Toast key={id} {...props}>
18:             <div className="grid gap-1">
19:               {title && <ToastTitle>{title}</ToastTitle>}
20:               {description && (
21:                 <ToastDescription>{description}</ToastDescription>
22:               )}
23:             </div>
24:             {action}
25:             <ToastClose />
26:           </Toast>
27:         )
28:       })}
29:       <ToastViewport />
30:     </ToastProvider>
31:   )
32: }
</file>

<file path="components/ui/toggle-group.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
 4: import { type VariantProps } from "class-variance-authority"
 5: import { cn } from "@/lib/utils"
 6: import { toggleVariants } from "@/components/ui/toggle"
 7: const ToggleGroupContext = React.createContext<
 8:   VariantProps<typeof toggleVariants>
 9: >({
10:   size: "default",
11:   variant: "default",
12: })
13: const ToggleGroup = React.forwardRef<
14:   React.ElementRef<typeof ToggleGroupPrimitive.Root>,
15:   React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
16:     VariantProps<typeof toggleVariants>
17: >(({ className, variant, size, children, ...props }, ref) => (
18:   <ToggleGroupPrimitive.Root
19:     ref={ref}
20:     className={cn("flex items-center justify-center gap-1", className)}
21:     {...props}
22:   >
23:     <ToggleGroupContext.Provider value={{ variant, size }}>
24:       {children}
25:     </ToggleGroupContext.Provider>
26:   </ToggleGroupPrimitive.Root>
27: ))
28: ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName
29: const ToggleGroupItem = React.forwardRef<
30:   React.ElementRef<typeof ToggleGroupPrimitive.Item>,
31:   React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
32:     VariantProps<typeof toggleVariants>
33: >(({ className, children, variant, size, ...props }, ref) => {
34:   const context = React.useContext(ToggleGroupContext)
35:   return (
36:     <ToggleGroupPrimitive.Item
37:       ref={ref}
38:       className={cn(
39:         toggleVariants({
40:           variant: context.variant || variant,
41:           size: context.size || size,
42:         }),
43:         className
44:       )}
45:       {...props}
46:     >
47:       {children}
48:     </ToggleGroupPrimitive.Item>
49:   )
50: })
51: ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName
52: export { ToggleGroup, ToggleGroupItem }
</file>

<file path="components/ui/toggle.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as TogglePrimitive from "@radix-ui/react-toggle"
 4: import { cva, type VariantProps } from "class-variance-authority"
 5: import { cn } from "@/lib/utils"
 6: const toggleVariants = cva(
 7:   "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
 8:   {
 9:     variants: {
10:       variant: {
11:         default: "bg-transparent",
12:         outline:
13:           "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
14:       },
15:       size: {
16:         default: "h-10 px-3 min-w-10",
17:         sm: "h-9 px-2.5 min-w-9",
18:         lg: "h-11 px-5 min-w-11",
19:       },
20:     },
21:     defaultVariants: {
22:       variant: "default",
23:       size: "default",
24:     },
25:   }
26: )
27: const Toggle = React.forwardRef<
28:   React.ElementRef<typeof TogglePrimitive.Root>,
29:   React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
30:     VariantProps<typeof toggleVariants>
31: >(({ className, variant, size, ...props }, ref) => (
32:   <TogglePrimitive.Root
33:     ref={ref}
34:     className={cn(toggleVariants({ variant, size, className }))}
35:     {...props}
36:   />
37: ))
38: Toggle.displayName = TogglePrimitive.Root.displayName
39: export { Toggle, toggleVariants }
</file>

<file path="components/ui/tooltip.tsx">
 1: "use client"
 2: import * as React from "react"
 3: import * as TooltipPrimitive from "@radix-ui/react-tooltip"
 4: import { cn } from "@/lib/utils"
 5: const TooltipProvider = TooltipPrimitive.Provider
 6: const Tooltip = TooltipPrimitive.Root
 7: const TooltipTrigger = TooltipPrimitive.Trigger
 8: const TooltipContent = React.forwardRef<
 9:   React.ElementRef<typeof TooltipPrimitive.Content>,
10:   React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
11: >(({ className, sideOffset = 4, ...props }, ref) => (
12:   <TooltipPrimitive.Content
13:     ref={ref}
14:     sideOffset={sideOffset}
15:     className={cn(
16:       "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
17:       className
18:     )}
19:     {...props}
20:   />
21: ))
22: TooltipContent.displayName = TooltipPrimitive.Content.displayName
23: export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="components/ui/use-mobile.tsx">
 1: import * as React from "react"
 2: const MOBILE_BREAKPOINT = 768
 3: export function useIsMobile() {
 4:   const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
 5:   React.useEffect(() => {
 6:     const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
 7:     const onChange = () => {
 8:       setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
 9:     }
10:     mql.addEventListener("change", onChange)
11:     setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
12:     return () => mql.removeEventListener("change", onChange)
13:   }, [])
14:   return !!isMobile
15: }
</file>

<file path="components/ui/use-toast.ts">
  1: "use client"
  2: // Inspired by react-hot-toast library
  3: import * as React from "react"
  4: import type {
  5:   ToastActionElement,
  6:   ToastProps,
  7: } from "@/components/ui/toast"
  8: const TOAST_LIMIT = 1
  9: const TOAST_REMOVE_DELAY = 1000000
 10: type ToasterToast = ToastProps & {
 11:   id: string
 12:   title?: React.ReactNode
 13:   description?: React.ReactNode
 14:   action?: ToastActionElement
 15: }
 16: const actionTypes = {
 17:   ADD_TOAST: "ADD_TOAST",
 18:   UPDATE_TOAST: "UPDATE_TOAST",
 19:   DISMISS_TOAST: "DISMISS_TOAST",
 20:   REMOVE_TOAST: "REMOVE_TOAST",
 21: } as const
 22: let count = 0
 23: function genId() {
 24:   count = (count + 1) % Number.MAX_SAFE_INTEGER
 25:   return count.toString()
 26: }
 27: type ActionType = typeof actionTypes
 28: type Action =
 29:   | {
 30:       type: ActionType["ADD_TOAST"]
 31:       toast: ToasterToast
 32:     }
 33:   | {
 34:       type: ActionType["UPDATE_TOAST"]
 35:       toast: Partial<ToasterToast>
 36:     }
 37:   | {
 38:       type: ActionType["DISMISS_TOAST"]
 39:       toastId?: ToasterToast["id"]
 40:     }
 41:   | {
 42:       type: ActionType["REMOVE_TOAST"]
 43:       toastId?: ToasterToast["id"]
 44:     }
 45: interface State {
 46:   toasts: ToasterToast[]
 47: }
 48: const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
 49: const addToRemoveQueue = (toastId: string) => {
 50:   if (toastTimeouts.has(toastId)) {
 51:     return
 52:   }
 53:   const timeout = setTimeout(() => {
 54:     toastTimeouts.delete(toastId)
 55:     dispatch({
 56:       type: "REMOVE_TOAST",
 57:       toastId: toastId,
 58:     })
 59:   }, TOAST_REMOVE_DELAY)
 60:   toastTimeouts.set(toastId, timeout)
 61: }
 62: export const reducer = (state: State, action: Action): State => {
 63:   switch (action.type) {
 64:     case "ADD_TOAST":
 65:       return {
 66:         ...state,
 67:         toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
 68:       }
 69:     case "UPDATE_TOAST":
 70:       return {
 71:         ...state,
 72:         toasts: state.toasts.map((t) =>
 73:           t.id === action.toast.id ? { ...t, ...action.toast } : t
 74:         ),
 75:       }
 76:     case "DISMISS_TOAST": {
 77:       const { toastId } = action
 78:       // ! Side effects ! - This could be extracted into a dismissToast() action,
 79:       // but I'll keep it here for simplicity
 80:       if (toastId) {
 81:         addToRemoveQueue(toastId)
 82:       } else {
 83:         state.toasts.forEach((toast) => {
 84:           addToRemoveQueue(toast.id)
 85:         })
 86:       }
 87:       return {
 88:         ...state,
 89:         toasts: state.toasts.map((t) =>
 90:           t.id === toastId || toastId === undefined
 91:             ? {
 92:                 ...t,
 93:                 open: false,
 94:               }
 95:             : t
 96:         ),
 97:       }
 98:     }
 99:     case "REMOVE_TOAST":
100:       if (action.toastId === undefined) {
101:         return {
102:           ...state,
103:           toasts: [],
104:         }
105:       }
106:       return {
107:         ...state,
108:         toasts: state.toasts.filter((t) => t.id !== action.toastId),
109:       }
110:   }
111: }
112: const listeners: Array<(state: State) => void> = []
113: let memoryState: State = { toasts: [] }
114: function dispatch(action: Action) {
115:   memoryState = reducer(memoryState, action)
116:   listeners.forEach((listener) => {
117:     listener(memoryState)
118:   })
119: }
120: type Toast = Omit<ToasterToast, "id">
121: function toast({ ...props }: Toast) {
122:   const id = genId()
123:   const update = (props: ToasterToast) =>
124:     dispatch({
125:       type: "UPDATE_TOAST",
126:       toast: { ...props, id },
127:     })
128:   const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
129:   dispatch({
130:     type: "ADD_TOAST",
131:     toast: {
132:       ...props,
133:       id,
134:       open: true,
135:       onOpenChange: (open) => {
136:         if (!open) dismiss()
137:       },
138:     },
139:   })
140:   return {
141:     id: id,
142:     dismiss,
143:     update,
144:   }
145: }
146: function useToast() {
147:   const [state, setState] = React.useState<State>(memoryState)
148:   React.useEffect(() => {
149:     listeners.push(setState)
150:     return () => {
151:       const index = listeners.indexOf(setState)
152:       if (index > -1) {
153:         listeners.splice(index, 1)
154:       }
155:     }
156:   }, [state])
157:   return {
158:     ...state,
159:     toast,
160:     dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
161:   }
162: }
163: export { useToast, toast }
</file>

<file path="components/data-exposure-metrics.tsx">
 1: "use client"
 2: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
 3: import { Progress } from "@/components/ui/progress"
 4: const exposureData = [
 5:   {
 6:     category: "Personal Information",
 7:     exposed: 65,
 8:     items: [
 9:       { name: "Full Name", platforms: ["Facebook", "LinkedIn", "Twitter", "Instagram"] },
10:       { name: "Profile Picture", platforms: ["Facebook", "LinkedIn", "Twitter", "Instagram"] },
11:       { name: "Location", platforms: ["Facebook", "LinkedIn"] },
12:       { name: "Email Address", platforms: ["LinkedIn"] },
13:       { name: "Phone Number", platforms: [] },
14:     ],
15:   },
16:   {
17:     category: "Activity Data",
18:     exposed: 78,
19:     items: [
20:       { name: "Posts & Comments", platforms: ["Facebook", "Twitter", "Instagram"] },
21:       { name: "Likes & Reactions", platforms: ["Facebook", "Instagram"] },
22:       { name: "Shared Content", platforms: ["Facebook", "LinkedIn", "Twitter"] },
23:       { name: "Tagged Photos", platforms: ["Facebook", "Instagram"] },
24:     ],
25:   },
26:   {
27:     category: "Connection Data",
28:     exposed: 92,
29:     items: [
30:       { name: "Friends & Connections", platforms: ["Facebook", "LinkedIn"] },
31:       { name: "Following/Followers", platforms: ["Twitter", "Instagram", "LinkedIn"] },
32:       { name: "Groups & Communities", platforms: ["Facebook", "LinkedIn"] },
33:     ],
34:   },
35:   {
36:     category: "Behavioral Data",
37:     exposed: 45,
38:     items: [
39:       { name: "Browsing History", platforms: ["Facebook"] },
40:       { name: "Ad Interactions", platforms: ["Facebook", "Instagram", "Twitter"] },
41:       { name: "Search History", platforms: [] },
42:     ],
43:   },
44: ]
45: export default function DataExposureMetrics() {
46:   return (
47:     <Card>
48:       <CardHeader>
49:         <CardTitle>Data Exposure Analysis</CardTitle>
50:         <CardDescription>Overview of your personal data exposure across social platforms</CardDescription>
51:       </CardHeader>
52:       <CardContent>
53:         <div className="space-y-6">
54:           {exposureData.map((category) => (
55:             <div key={category.category} className="space-y-2">
56:               <div className="flex items-center justify-between">
57:                 <h3 className="font-medium">{category.category}</h3>
58:                 <span className="text-sm text-muted-foreground">{category.exposed}% exposed</span>
59:               </div>
60:               <Progress value={category.exposed} className="h-2" />
61:               <div className="mt-2 space-y-1">
62:                 {category.items.map((item) => (
63:                   <div key={item.name} className="flex items-center justify-between text-sm">
64:                     <span>{item.name}</span>
65:                     <div className="flex items-center">
66:                       <span
67:                         className={`mr-2 h-2 w-2 rounded-full ${item.platforms.length > 0 ? "bg-orange-500" : "bg-green-500"}`}
68:                       ></span>
69:                       <span className="text-xs text-muted-foreground">
70:                         {item.platforms.length > 0
71:                           ? `Visible on ${item.platforms.length} platform${item.platforms.length > 1 ? "s" : ""}`
72:                           : "Not visible"}
73:                       </span>
74:                     </div>
75:                   </div>
76:                 ))}
77:               </div>
78:             </div>
79:           ))}
80:         </div>
81:       </CardContent>
82:     </Card>
83:   )
84: }
</file>

<file path="components/platform-settings.tsx">
  1: "use client"
  2: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
  3: import { Badge } from "@/components/ui/badge"
  4: import { Button } from "@/components/ui/button"
  5: import { AlertTriangle, CheckCircle, ExternalLink, Facebook, Instagram, Linkedin, Twitter } from "lucide-react"
  6: import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
  7: interface PlatformSettingsProps {
  8:   platform: "facebook" | "instagram" | "twitter" | "linkedin"
  9: }
 10: const platformData = {
 11:   facebook: {
 12:     name: "Facebook",
 13:     icon: Facebook,
 14:     color: "#1877F2",
 15:     url: "https://www.facebook.com/settings",
 16:     settings: [
 17:       {
 18:         id: "profile_visibility",
 19:         name: "Profile Visibility",
 20:         description: "Who can see your profile information",
 21:         status: "Public",
 22:         recommended: "Friends only",
 23:         critical: true,
 24:       },
 25:       {
 26:         id: "post_visibility",
 27:         name: "Post Visibility",
 28:         description: "Who can see your posts and updates",
 29:         status: "Public",
 30:         recommended: "Friends only",
 31:         critical: false,
 32:       },
 33:       {
 34:         id: "friend_list",
 35:         name: "Friend List Visibility",
 36:         description: "Who can see your list of friends",
 37:         status: "Public",
 38:         recommended: "Only me",
 39:         critical: false,
 40:       },
 41:       {
 42:         id: "tagging",
 43:         name: "Tagging Controls",
 44:         description: "Review tags people add to your content",
 45:         status: "Off",
 46:         recommended: "On",
 47:         critical: true,
 48:       },
 49:       {
 50:         id: "facial_recognition",
 51:         name: "Facial Recognition",
 52:         description: "Allow Facebook to recognize you in photos",
 53:         status: "On",
 54:         recommended: "Off",
 55:         critical: true,
 56:       },
 57:       {
 58:         id: "ad_targeting",
 59:         name: "Ad Targeting",
 60:         description: "Allow personalized ads based on your data",
 61:         status: "On",
 62:         recommended: "Limited",
 63:         critical: false,
 64:       },
 65:       {
 66:         id: "location_history",
 67:         name: "Location History",
 68:         description: "Track and store your precise location",
 69:         status: "Off",
 70:         recommended: "Off",
 71:         critical: true,
 72:       },
 73:     ],
 74:   },
 75:   instagram: {
 76:     name: "Instagram",
 77:     icon: Instagram,
 78:     color: "#E1306C",
 79:     url: "https://www.instagram.com/accounts/privacy_and_security/",
 80:     settings: [
 81:       {
 82:         id: "account_privacy",
 83:         name: "Private Account",
 84:         description: "Only approved followers can see your content",
 85:         status: "Off",
 86:         recommended: "On",
 87:         critical: true,
 88:       },
 89:       {
 90:         id: "activity_status",
 91:         name: "Activity Status",
 92:         description: "Show when you're active on Instagram",
 93:         status: "On",
 94:         recommended: "Off",
 95:         critical: false,
 96:       },
 97:       {
 98:         id: "story_sharing",
 99:         name: "Story Sharing",
100:         description: "Allow others to share your stories",
101:         status: "On",
102:         recommended: "Off",
103:         critical: false,
104:       },
105:       {
106:         id: "tagged_content",
107:         name: "Tagged Content Review",
108:         description: "Review posts you're tagged in",
109:         status: "Off",
110:         recommended: "On",
111:         critical: true,
112:       },
113:       {
114:         id: "data_sharing",
115:         name: "Data Sharing with Facebook",
116:         description: "Share your Instagram data with Facebook",
117:         status: "On",
118:         recommended: "Off",
119:         critical: true,
120:       },
121:     ],
122:   },
123:   twitter: {
124:     name: "Twitter",
125:     icon: Twitter,
126:     color: "#1DA1F2",
127:     url: "https://twitter.com/settings/privacy_and_safety",
128:     settings: [
129:       {
130:         id: "tweet_privacy",
131:         name: "Tweet Privacy",
132:         description: "Protect your tweets from public view",
133:         status: "Off",
134:         recommended: "On",
135:         critical: true,
136:       },
137:       {
138:         id: "location_tagging",
139:         name: "Location Tagging",
140:         description: "Add location information to your tweets",
141:         status: "On",
142:         recommended: "Off",
143:         critical: false,
144:       },
145:       {
146:         id: "discoverability",
147:         name: "Discoverability",
148:         description: "Let others find you by email or phone",
149:         status: "On",
150:         recommended: "Off",
151:         critical: true,
152:       },
153:       {
154:         id: "personalization",
155:         name: "Personalization and Data",
156:         description: "Control how Twitter uses your data",
157:         status: "On",
158:         recommended: "Limited",
159:         critical: false,
160:       },
161:       {
162:         id: "direct_messages",
163:         name: "Direct Message Privacy",
164:         description: "Who can send you direct messages",
165:         status: "Anyone",
166:         recommended: "Following only",
167:         critical: false,
168:       },
169:     ],
170:   },
171:   linkedin: {
172:     name: "LinkedIn",
173:     icon: Linkedin,
174:     color: "#0A66C2",
175:     url: "https://www.linkedin.com/psettings/",
176:     settings: [
177:       {
178:         id: "profile_visibility",
179:         name: "Profile Visibility",
180:         description: "Who can see your profile",
181:         status: "Public",
182:         recommended: "Connections only",
183:         critical: true,
184:       },
185:       {
186:         id: "connections_visibility",
187:         name: "Connections Visibility",
188:         description: "Who can see your connections",
189:         status: "Anyone",
190:         recommended: "Only you",
191:         critical: false,
192:       },
193:       {
194:         id: "activity_broadcast",
195:         name: "Activity Broadcasts",
196:         description: "Share profile changes with your network",
197:         status: "On",
198:         recommended: "Off",
199:         critical: false,
200:       },
201:       {
202:         id: "data_visibility",
203:         name: "Data Visibility",
204:         description: "How your data is used for research",
205:         status: "On",
206:         recommended: "Off",
207:         critical: true,
208:       },
209:       {
210:         id: "messaging_preferences",
211:         name: "Messaging Preferences",
212:         description: "Who can send you messages",
213:         status: "Anyone",
214:         recommended: "Connections only",
215:         critical: false,
216:       },
217:     ],
218:   },
219: }
220: export default function PlatformSettings({ platform }: PlatformSettingsProps) {
221:   const data = platformData[platform]
222:   const criticalIssuesCount = data.settings.filter((s) => s.critical && s.status !== s.recommended).length
223:   const PlatformIcon = data.icon
224:   return (
225:     <div className="space-y-6">
226:       <div className="flex items-center gap-3">
227:         <div
228:           className="flex h-10 w-10 items-center justify-center rounded-full"
229:           style={{ backgroundColor: data.color }}
230:         >
231:           <PlatformIcon className="h-6 w-6 text-white" />
232:         </div>
233:         <div>
234:           <h2 className="text-xl font-bold">{data.name} Privacy Settings</h2>
235:           <p className="text-sm text-muted-foreground">Analysis of your current privacy settings for {data.name}</p>
236:         </div>
237:       </div>
238:       {criticalIssuesCount > 0 && (
239:         <Alert variant="destructive">
240:           <AlertTriangle className="h-4 w-4" />
241:           <AlertTitle>Privacy Risk Detected</AlertTitle>
242:           <AlertDescription>
243:             You have {criticalIssuesCount} critical privacy {criticalIssuesCount === 1 ? "setting" : "settings"} that
244:             may expose your personal data.
245:           </AlertDescription>
246:         </Alert>
247:       )}
248:       <div className="grid gap-4 md:grid-cols-2">
249:         {data.settings.map((setting) => {
250:           const isRisky = setting.critical && setting.status !== setting.recommended
251:           return (
252:             <Card key={setting.id} className={isRisky ? "border-red-200 bg-red-50" : ""}>
253:               <CardHeader className="pb-2">
254:                 <div className="flex items-start justify-between">
255:                   <div>
256:                     <CardTitle className="text-base">{setting.name}</CardTitle>
257:                     <CardDescription>{setting.description}</CardDescription>
258:                   </div>
259:                   <Badge variant={setting.status === setting.recommended ? "outline" : "destructive"}>
260:                     {setting.status}
261:                   </Badge>
262:                 </div>
263:               </CardHeader>
264:               <CardContent>
265:                 <div className="flex items-center gap-2 text-sm">
266:                   {setting.status === setting.recommended ? (
267:                     <CheckCircle className="h-4 w-4 text-green-500" />
268:                   ) : (
269:                     <AlertTriangle className="h-4 w-4 text-red-500" />
270:                   )}
271:                   <span className={setting.status === setting.recommended ? "text-green-500" : "text-red-500"}>
272:                     {setting.status === setting.recommended ? "Optimal setting" : `Recommended: ${setting.recommended}`}
273:                   </span>
274:                 </div>
275:               </CardContent>
276:             </Card>
277:           )
278:         })}
279:       </div>
280:       <div className="flex justify-center">
281:         <Button onClick={() => window.open(data.url, "_blank")}>
282:           <ExternalLink className="mr-2 h-4 w-4" />
283:           Visit {data.name} Settings
284:         </Button>
285:       </div>
286:     </div>
287:   )
288: }
</file>

<file path="components/privacy-dashboard.tsx">
  1: "use client"
  2: import { useState } from "react"
  3: import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
  4: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
  5: import PrivacyScore from "@/components/privacy-score"
  6: import DataExposureMetrics from "@/components/data-exposure-metrics"
  7: import PlatformSettings from "@/components/platform-settings"
  8: import PrivacyRecommendations from "@/components/privacy-recommendations"
  9: import { Button } from "@/components/ui/button"
 10: import { AlertCircle, Download, RefreshCw } from "lucide-react"
 11: import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
 12: export default function PrivacyDashboard() {
 13:   const [isRefreshing, setIsRefreshing] = useState(false)
 14:   const handleRefresh = () => {
 15:     setIsRefreshing(true)
 16:     // Simulate refresh
 17:     setTimeout(() => {
 18:       setIsRefreshing(false)
 19:     }, 2000)
 20:   }
 21:   return (
 22:     <div className="space-y-6">
 23:       <Alert>
 24:         <AlertCircle className="h-4 w-4" />
 25:         <AlertTitle>Read-Only Report</AlertTitle>
 26:         <AlertDescription>
 27:           This is an analysis of your current privacy settings. To change settings, you'll need to visit each platform
 28:           directly.
 29:         </AlertDescription>
 30:       </Alert>
 31:       <div className="flex flex-col justify-between gap-4 sm:flex-row">
 32:         <div>
 33:           <h2 className="text-2xl font-bold">Privacy Dashboard</h2>
 34:           <p className="text-muted-foreground">Last updated: April 22, 2025</p>
 35:         </div>
 36:         <div className="flex gap-2">
 37:           <Button variant="outline" onClick={handleRefresh} disabled={isRefreshing}>
 38:             <RefreshCw className={`mr-2 h-4 w-4 ${isRefreshing ? "animate-spin" : ""}`} />
 39:             Refresh
 40:           </Button>
 41:           <Button>
 42:             <Download className="mr-2 h-4 w-4" />
 43:             Export Report
 44:           </Button>
 45:         </div>
 46:       </div>
 47:       <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
 48:         <Card>
 49:           <CardHeader className="pb-2">
 50:             <CardTitle className="text-sm font-medium">Overall Privacy Score</CardTitle>
 51:           </CardHeader>
 52:           <CardContent>
 53:             <div className="flex items-center justify-center py-4">
 54:               <PrivacyScore score={68} />
 55:             </div>
 56:           </CardContent>
 57:         </Card>
 58:         <Card>
 59:           <CardHeader className="pb-2">
 60:             <CardTitle className="text-sm font-medium">Public Information</CardTitle>
 61:           </CardHeader>
 62:           <CardContent>
 63:             <div className="text-2xl font-bold">24 items</div>
 64:             <p className="text-xs text-muted-foreground">+2 since last month</p>
 65:           </CardContent>
 66:         </Card>
 67:         <Card>
 68:           <CardHeader className="pb-2">
 69:             <CardTitle className="text-sm font-medium">Third-Party Access</CardTitle>
 70:           </CardHeader>
 71:           <CardContent>
 72:             <div className="text-2xl font-bold">7 apps</div>
 73:             <p className="text-xs text-muted-foreground">-3 since last month</p>
 74:           </CardContent>
 75:         </Card>
 76:         <Card>
 77:           <CardHeader className="pb-2">
 78:             <CardTitle className="text-sm font-medium">Data Requests</CardTitle>
 79:           </CardHeader>
 80:           <CardContent>
 81:             <div className="text-2xl font-bold">12 requests</div>
 82:             <p className="text-xs text-muted-foreground">Last 30 days</p>
 83:           </CardContent>
 84:         </Card>
 85:       </div>
 86:       <Tabs defaultValue="overview" className="space-y-4">
 87:         <TabsList>
 88:           <TabsTrigger value="overview">Overview</TabsTrigger>
 89:           <TabsTrigger value="facebook">Facebook</TabsTrigger>
 90:           <TabsTrigger value="instagram">Instagram</TabsTrigger>
 91:           <TabsTrigger value="twitter">Twitter</TabsTrigger>
 92:           <TabsTrigger value="linkedin">LinkedIn</TabsTrigger>
 93:         </TabsList>
 94:         <TabsContent value="overview" className="space-y-4">
 95:           <DataExposureMetrics />
 96:           <PrivacyRecommendations />
 97:         </TabsContent>
 98:         <TabsContent value="facebook">
 99:           <PlatformSettings platform="facebook" />
100:         </TabsContent>
101:         <TabsContent value="instagram">
102:           <PlatformSettings platform="instagram" />
103:         </TabsContent>
104:         <TabsContent value="twitter">
105:           <PlatformSettings platform="twitter" />
106:         </TabsContent>
107:         <TabsContent value="linkedin">
108:           <PlatformSettings platform="linkedin" />
109:         </TabsContent>
110:       </Tabs>
111:     </div>
112:   )
113: }
</file>

<file path="components/privacy-recommendations.tsx">
  1: import { Badge } from "@/components/ui/badge"
  2: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
  3: import { Button } from "@/components/ui/button"
  4: import { AlertTriangle, CheckCircle, Shield } from "lucide-react"
  5: import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
  6: const recommendations = [
  7:   {
  8:     id: 1,
  9:     title: "Enable Two-Factor Authentication",
 10:     description: "Add an extra layer of security to your accounts by enabling 2FA on all platforms.",
 11:     platforms: ["Facebook", "Instagram", "Twitter", "LinkedIn"],
 12:     impact: "high",
 13:     implemented: false,
 14:     instructions: [
 15:       {
 16:         platform: "Facebook",
 17:         steps: [
 18:           "Go to Settings & Privacy > Settings",
 19:           "Click on Security and Login",
 20:           "Scroll to Two-Factor Authentication and click Edit",
 21:           "Choose an authentication method (Authentication App recommended)",
 22:           "Follow the on-screen instructions to complete setup",
 23:         ],
 24:       },
 25:       {
 26:         platform: "Instagram",
 27:         steps: [
 28:           "Go to your profile and tap the menu icon",
 29:           "Tap Settings > Security",
 30:           "Tap Two-Factor Authentication",
 31:           "Choose an authentication method",
 32:           "Follow the on-screen instructions",
 33:         ],
 34:       },
 35:       {
 36:         platform: "Twitter",
 37:         steps: [
 38:           "Go to Settings and privacy > Security and account access > Security",
 39:           "Tap on Two-factor authentication",
 40:           "Choose your preferred method",
 41:           "Follow the on-screen instructions",
 42:         ],
 43:       },
 44:       {
 45:         platform: "LinkedIn",
 46:         steps: [
 47:           "Click on your profile icon > Settings & Privacy",
 48:           "Click on Sign in & security",
 49:           "Click on Two-step verification",
 50:           "Follow the on-screen instructions",
 51:         ],
 52:       },
 53:     ],
 54:   },
 55:   {
 56:     id: 2,
 57:     title: "Review Third-Party App Access",
 58:     description: "Remove access for unused or suspicious third-party applications.",
 59:     platforms: ["Facebook", "Twitter"],
 60:     impact: "high",
 61:     implemented: false,
 62:     instructions: [
 63:       {
 64:         platform: "Facebook",
 65:         steps: [
 66:           "Go to Settings & Privacy > Settings",
 67:           "Click on Apps and Websites",
 68:           "Review the list of active apps",
 69:           "Remove any apps you no longer use or don't recognize",
 70:           "For apps you keep, review and limit their permissions",
 71:         ],
 72:       },
 73:       {
 74:         platform: "Twitter",
 75:         steps: [
 76:           "Go to Settings and privacy > Security and account access",
 77:           "Tap Apps and sessions > Connected apps",
 78:           "Review the list and revoke access for any apps you don't use",
 79:         ],
 80:       },
 81:     ],
 82:   },
 83:   {
 84:     id: 3,
 85:     title: "Make Your Facebook Profile Private",
 86:     description: "Limit who can see your posts and personal information on Facebook.",
 87:     platforms: ["Facebook"],
 88:     impact: "high",
 89:     implemented: true,
 90:     instructions: [
 91:       {
 92:         platform: "Facebook",
 93:         steps: [
 94:           "Go to Settings & Privacy > Settings",
 95:           "Click on Privacy",
 96:           "Under 'Your Activity', set 'Who can see your future posts?' to Friends",
 97:           "Use the Privacy Checkup tool to review other privacy settings",
 98:           "Review the visibility of your profile information in the 'Profile and Tagging' section",
 99:         ],
100:       },
101:     ],
102:   },
103:   {
104:     id: 4,
105:     title: "Disable Location Tagging",
106:     description: "Prevent apps from automatically tagging your location in posts.",
107:     platforms: ["Facebook", "Instagram", "Twitter"],
108:     impact: "medium",
109:     implemented: false,
110:     instructions: [
111:       {
112:         platform: "Facebook",
113:         steps: [
114:           "Go to Settings & Privacy > Settings",
115:           "Click on Location",
116:           "Turn off Location History",
117:           "Review Location Access permissions for the Facebook app in your phone settings",
118:         ],
119:       },
120:       {
121:         platform: "Instagram",
122:         steps: [
123:           "Go to your profile and tap the menu icon",
124:           "Tap Settings > Privacy > Location Services",
125:           "Ensure Location Services is set to 'Never'",
126:         ],
127:       },
128:       {
129:         platform: "Twitter",
130:         steps: [
131:           "Go to Settings and privacy > Privacy and safety",
132:           "Scroll to Location information",
133:           "Uncheck 'Add location information to your Tweets'",
134:         ],
135:       },
136:     ],
137:   },
138:   {
139:     id: 5,
140:     title: "Opt Out of Ad Personalization",
141:     description: "Limit how your data is used for targeted advertising.",
142:     platforms: ["Facebook", "Instagram", "Twitter", "LinkedIn"],
143:     impact: "medium",
144:     implemented: true,
145:     instructions: [
146:       {
147:         platform: "Facebook",
148:         steps: [
149:           "Go to Settings & Privacy > Settings",
150:           "Click on Ads",
151:           "Review and adjust all ad preferences",
152:           "Turn off 'Ads based on data from partners'",
153:           "Turn off 'Ads based on your activity on Facebook Company Products'",
154:         ],
155:       },
156:       {
157:         platform: "Instagram",
158:         steps: [
159:           "Go to your profile and tap the menu icon",
160:           "Tap Settings > Ads",
161:           "Tap 'Ad Preferences' and adjust settings",
162:           "Turn off 'Data About Your Activity From Partners'",
163:         ],
164:       },
165:       {
166:         platform: "Twitter",
167:         steps: [
168:           "Go to Settings and privacy > Privacy and safety",
169:           "Tap Ads preferences",
170:           "Turn off 'Personalized ads'",
171:         ],
172:       },
173:       {
174:         platform: "LinkedIn",
175:         steps: [
176:           "Click on your profile icon > Settings & Privacy",
177:           "Click on Advertising data",
178:           "Turn off all personalization options",
179:         ],
180:       },
181:     ],
182:   },
183: ]
184: export default function PrivacyRecommendations() {
185:   return (
186:     <Card>
187:       <CardHeader>
188:         <div className="flex items-center justify-between">
189:           <div>
190:             <CardTitle className="flex items-center gap-2">
191:               <Shield className="h-5 w-5" />
192:               Privacy Recommendations
193:             </CardTitle>
194:             <CardDescription>Actionable steps to improve your social media privacy</CardDescription>
195:           </div>
196:           <Button variant="outline" size="sm">
197:             View All
198:           </Button>
199:         </div>
200:       </CardHeader>
201:       <CardContent>
202:         <div className="space-y-4">
203:           {recommendations.map((rec) => (
204:             <div
205:               key={rec.id}
206:               className={`rounded-lg border p-4 ${
207:                 rec.implemented
208:                   ? "border-green-100 bg-green-50"
209:                   : rec.impact === "high"
210:                     ? "border-amber-100 bg-amber-50"
211:                     : ""
212:               }`}
213:             >
214:               <div className="space-y-2">
215:                 <div className="flex items-start justify-between gap-4">
216:                   <div className="space-y-1">
217:                     <div className="flex items-center gap-2">
218:                       {rec.implemented ? (
219:                         <CheckCircle className="h-5 w-5 text-green-500" />
220:                       ) : rec.impact === "high" ? (
221:                         <AlertTriangle className="h-5 w-5 text-amber-500" />
222:                       ) : (
223:                         <Shield className="h-5 w-5 text-blue-500" />
224:                       )}
225:                       <h3 className="font-medium">{rec.title}</h3>
226:                     </div>
227:                     <p className="text-sm text-muted-foreground">{rec.description}</p>
228:                     <div className="flex flex-wrap gap-1 pt-1">
229:                       {rec.platforms.map((platform) => (
230:                         <span
231:                           key={platform}
232:                           className="inline-flex items-center rounded-full bg-gray-100 px-2 py-0.5 text-xs font-medium"
233:                         >
234:                           {platform}
235:                         </span>
236:                       ))}
237:                     </div>
238:                   </div>
239:                   <Badge
240:                     className={
241:                       rec.implemented ? "bg-green-500" : rec.impact === "high" ? "bg-amber-500" : "bg-blue-500"
242:                     }
243:                   >
244:                     {rec.implemented ? "Implemented" : rec.impact === "high" ? "High Priority" : "Recommended"}
245:                   </Badge>
246:                 </div>
247:                 {!rec.implemented && (
248:                   <Accordion type="single" collapsible className="mt-2">
249:                     <AccordionItem value="instructions">
250:                       <AccordionTrigger className="text-sm font-medium">How to implement</AccordionTrigger>
251:                       <AccordionContent>
252:                         <div className="space-y-4 pt-2">
253:                           {rec.instructions.map((instruction) => (
254:                             <div key={instruction.platform} className="space-y-2">
255:                               <h4 className="font-medium">{instruction.platform}</h4>
256:                               <ol className="ml-5 list-decimal space-y-1 text-sm text-muted-foreground">
257:                                 {instruction.steps.map((step, index) => (
258:                                   <li key={index}>{step}</li>
259:                                 ))}
260:                               </ol>
261:                             </div>
262:                           ))}
263:                         </div>
264:                       </AccordionContent>
265:                     </AccordionItem>
266:                   </Accordion>
267:                 )}
268:               </div>
269:             </div>
270:           ))}
271:         </div>
272:       </CardContent>
273:     </Card>
274:   )
275: }
</file>

<file path="components/privacy-score.tsx">
 1: "use client"
 2: import { useEffect, useState } from "react"
 3: interface PrivacyScoreProps {
 4:   score: number
 5: }
 6: export default function PrivacyScore({ score }: PrivacyScoreProps) {
 7:   const [displayScore, setDisplayScore] = useState(0)
 8:   useEffect(() => {
 9:     const timer = setTimeout(() => {
10:       setDisplayScore(score)
11:     }, 500)
12:     return () => clearTimeout(timer)
13:   }, [score])
14:   // Calculate color based on score
15:   const getColor = (value: number) => {
16:     if (value < 40) return "#ef4444" // Red for poor
17:     if (value < 70) return "#f59e0b" // Amber for moderate
18:     return "#22c55e" // Green for good
19:   }
20:   const circumference = 2 * Math.PI * 40 // r = 40
21:   const strokeDashoffset = circumference - (displayScore / 100) * circumference
22:   const color = getColor(displayScore)
23:   return (
24:     <div className="relative flex h-32 w-32 items-center justify-center">
25:       <svg className="h-full w-full" viewBox="0 0 100 100">
26:         {/* Background circle */}
27:         <circle cx="50" cy="50" r="40" fill="none" stroke="#e5e7eb" strokeWidth="10" />
28:         {/* Progress circle */}
29:         <circle
30:           cx="50"
31:           cy="50"
32:           r="40"
33:           fill="none"
34:           stroke={color}
35:           strokeWidth="10"
36:           strokeDasharray={circumference}
37:           strokeDashoffset={strokeDashoffset}
38:           strokeLinecap="round"
39:           transform="rotate(-90 50 50)"
40:           style={{ transition: "stroke-dashoffset 1s ease-in-out, stroke 1s" }}
41:         />
42:       </svg>
43:       <div className="absolute flex flex-col items-center justify-center text-center">
44:         <span className="text-3xl font-bold" style={{ color }}>
45:           {displayScore}
46:         </span>
47:         <span className="text-xs text-muted-foreground">out of 100</span>
48:       </div>
49:     </div>
50:   )
51: }
</file>

<file path="components/theme-provider.tsx">
1: 'use client'
2: import * as React from 'react'
3: import {
4:   ThemeProvider as NextThemesProvider,
5:   type ThemeProviderProps,
6: } from 'next-themes'
7: export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
8:   return <NextThemesProvider {...props}>{children}</NextThemesProvider>
9: }
</file>

<file path="hooks/use-mobile.tsx">
 1: import * as React from "react"
 2: const MOBILE_BREAKPOINT = 768
 3: export function useIsMobile() {
 4:   const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
 5:   React.useEffect(() => {
 6:     const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
 7:     const onChange = () => {
 8:       setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
 9:     }
10:     mql.addEventListener("change", onChange)
11:     setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
12:     return () => mql.removeEventListener("change", onChange)
13:   }, [])
14:   return !!isMobile
15: }
</file>

<file path="hooks/use-toast.ts">
  1: "use client"
  2: // Inspired by react-hot-toast library
  3: import * as React from "react"
  4: import type {
  5:   ToastActionElement,
  6:   ToastProps,
  7: } from "@/components/ui/toast"
  8: const TOAST_LIMIT = 1
  9: const TOAST_REMOVE_DELAY = 1000000
 10: type ToasterToast = ToastProps & {
 11:   id: string
 12:   title?: React.ReactNode
 13:   description?: React.ReactNode
 14:   action?: ToastActionElement
 15: }
 16: const actionTypes = {
 17:   ADD_TOAST: "ADD_TOAST",
 18:   UPDATE_TOAST: "UPDATE_TOAST",
 19:   DISMISS_TOAST: "DISMISS_TOAST",
 20:   REMOVE_TOAST: "REMOVE_TOAST",
 21: } as const
 22: let count = 0
 23: function genId() {
 24:   count = (count + 1) % Number.MAX_SAFE_INTEGER
 25:   return count.toString()
 26: }
 27: type ActionType = typeof actionTypes
 28: type Action =
 29:   | {
 30:       type: ActionType["ADD_TOAST"]
 31:       toast: ToasterToast
 32:     }
 33:   | {
 34:       type: ActionType["UPDATE_TOAST"]
 35:       toast: Partial<ToasterToast>
 36:     }
 37:   | {
 38:       type: ActionType["DISMISS_TOAST"]
 39:       toastId?: ToasterToast["id"]
 40:     }
 41:   | {
 42:       type: ActionType["REMOVE_TOAST"]
 43:       toastId?: ToasterToast["id"]
 44:     }
 45: interface State {
 46:   toasts: ToasterToast[]
 47: }
 48: const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
 49: const addToRemoveQueue = (toastId: string) => {
 50:   if (toastTimeouts.has(toastId)) {
 51:     return
 52:   }
 53:   const timeout = setTimeout(() => {
 54:     toastTimeouts.delete(toastId)
 55:     dispatch({
 56:       type: "REMOVE_TOAST",
 57:       toastId: toastId,
 58:     })
 59:   }, TOAST_REMOVE_DELAY)
 60:   toastTimeouts.set(toastId, timeout)
 61: }
 62: export const reducer = (state: State, action: Action): State => {
 63:   switch (action.type) {
 64:     case "ADD_TOAST":
 65:       return {
 66:         ...state,
 67:         toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
 68:       }
 69:     case "UPDATE_TOAST":
 70:       return {
 71:         ...state,
 72:         toasts: state.toasts.map((t) =>
 73:           t.id === action.toast.id ? { ...t, ...action.toast } : t
 74:         ),
 75:       }
 76:     case "DISMISS_TOAST": {
 77:       const { toastId } = action
 78:       // ! Side effects ! - This could be extracted into a dismissToast() action,
 79:       // but I'll keep it here for simplicity
 80:       if (toastId) {
 81:         addToRemoveQueue(toastId)
 82:       } else {
 83:         state.toasts.forEach((toast) => {
 84:           addToRemoveQueue(toast.id)
 85:         })
 86:       }
 87:       return {
 88:         ...state,
 89:         toasts: state.toasts.map((t) =>
 90:           t.id === toastId || toastId === undefined
 91:             ? {
 92:                 ...t,
 93:                 open: false,
 94:               }
 95:             : t
 96:         ),
 97:       }
 98:     }
 99:     case "REMOVE_TOAST":
100:       if (action.toastId === undefined) {
101:         return {
102:           ...state,
103:           toasts: [],
104:         }
105:       }
106:       return {
107:         ...state,
108:         toasts: state.toasts.filter((t) => t.id !== action.toastId),
109:       }
110:   }
111: }
112: const listeners: Array<(state: State) => void> = []
113: let memoryState: State = { toasts: [] }
114: function dispatch(action: Action) {
115:   memoryState = reducer(memoryState, action)
116:   listeners.forEach((listener) => {
117:     listener(memoryState)
118:   })
119: }
120: type Toast = Omit<ToasterToast, "id">
121: function toast({ ...props }: Toast) {
122:   const id = genId()
123:   const update = (props: ToasterToast) =>
124:     dispatch({
125:       type: "UPDATE_TOAST",
126:       toast: { ...props, id },
127:     })
128:   const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
129:   dispatch({
130:     type: "ADD_TOAST",
131:     toast: {
132:       ...props,
133:       id,
134:       open: true,
135:       onOpenChange: (open) => {
136:         if (!open) dismiss()
137:       },
138:     },
139:   })
140:   return {
141:     id: id,
142:     dismiss,
143:     update,
144:   }
145: }
146: function useToast() {
147:   const [state, setState] = React.useState<State>(memoryState)
148:   React.useEffect(() => {
149:     listeners.push(setState)
150:     return () => {
151:       const index = listeners.indexOf(setState)
152:       if (index > -1) {
153:         listeners.splice(index, 1)
154:       }
155:     }
156:   }, [state])
157:   return {
158:     ...state,
159:     toast,
160:     dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
161:   }
162: }
163: export { useToast, toast }
</file>

<file path="lib/utils.ts">
1: import { clsx, type ClassValue } from "clsx"
2: import { twMerge } from "tailwind-merge"
3: export function cn(...inputs: ClassValue[]) {
4:   return twMerge(clsx(inputs))
5: }
</file>

<file path="public/placeholder-logo.svg">
1: <svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
</file>

<file path="public/placeholder.svg">
1: <svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="styles/globals.css">
 1: @tailwind base;
 2: @tailwind components;
 3: @tailwind utilities;
 4: body {
 5:   font-family: Arial, Helvetica, sans-serif;
 6: }
 7: @layer utilities {
 8:   .text-balance {
 9:     text-wrap: balance;
10:   }
11: }
12: @layer base {
13:   :root {
14:     --background: 0 0% 100%;
15:     --foreground: 0 0% 3.9%;
16:     --card: 0 0% 100%;
17:     --card-foreground: 0 0% 3.9%;
18:     --popover: 0 0% 100%;
19:     --popover-foreground: 0 0% 3.9%;
20:     --primary: 0 0% 9%;
21:     --primary-foreground: 0 0% 98%;
22:     --secondary: 0 0% 96.1%;
23:     --secondary-foreground: 0 0% 9%;
24:     --muted: 0 0% 96.1%;
25:     --muted-foreground: 0 0% 45.1%;
26:     --accent: 0 0% 96.1%;
27:     --accent-foreground: 0 0% 9%;
28:     --destructive: 0 84.2% 60.2%;
29:     --destructive-foreground: 0 0% 98%;
30:     --border: 0 0% 89.8%;
31:     --input: 0 0% 89.8%;
32:     --ring: 0 0% 3.9%;
33:     --chart-1: 12 76% 61%;
34:     --chart-2: 173 58% 39%;
35:     --chart-3: 197 37% 24%;
36:     --chart-4: 43 74% 66%;
37:     --chart-5: 27 87% 67%;
38:     --radius: 0.5rem;
39:     --sidebar-background: 0 0% 98%;
40:     --sidebar-foreground: 240 5.3% 26.1%;
41:     --sidebar-primary: 240 5.9% 10%;
42:     --sidebar-primary-foreground: 0 0% 98%;
43:     --sidebar-accent: 240 4.8% 95.9%;
44:     --sidebar-accent-foreground: 240 5.9% 10%;
45:     --sidebar-border: 220 13% 91%;
46:     --sidebar-ring: 217.2 91.2% 59.8%;
47:   }
48:   .dark {
49:     --background: 0 0% 3.9%;
50:     --foreground: 0 0% 98%;
51:     --card: 0 0% 3.9%;
52:     --card-foreground: 0 0% 98%;
53:     --popover: 0 0% 3.9%;
54:     --popover-foreground: 0 0% 98%;
55:     --primary: 0 0% 98%;
56:     --primary-foreground: 0 0% 9%;
57:     --secondary: 0 0% 14.9%;
58:     --secondary-foreground: 0 0% 98%;
59:     --muted: 0 0% 14.9%;
60:     --muted-foreground: 0 0% 63.9%;
61:     --accent: 0 0% 14.9%;
62:     --accent-foreground: 0 0% 98%;
63:     --destructive: 0 62.8% 30.6%;
64:     --destructive-foreground: 0 0% 98%;
65:     --border: 0 0% 14.9%;
66:     --input: 0 0% 14.9%;
67:     --ring: 0 0% 83.1%;
68:     --chart-1: 220 70% 50%;
69:     --chart-2: 160 60% 45%;
70:     --chart-3: 30 80% 55%;
71:     --chart-4: 280 65% 60%;
72:     --chart-5: 340 75% 55%;
73:     --sidebar-background: 240 5.9% 10%;
74:     --sidebar-foreground: 240 4.8% 95.9%;
75:     --sidebar-primary: 224.3 76.3% 48%;
76:     --sidebar-primary-foreground: 0 0% 100%;
77:     --sidebar-accent: 240 3.7% 15.9%;
78:     --sidebar-accent-foreground: 240 4.8% 95.9%;
79:     --sidebar-border: 240 3.7% 15.9%;
80:     --sidebar-ring: 217.2 91.2% 59.8%;
81:   }
82: }
83: @layer base {
84:   * {
85:     @apply border-border;
86:   }
87:   body {
88:     @apply bg-background text-foreground;
89:   }
90: }
</file>

<file path=".gitignore">
 1: # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 2: 
 3: # dependencies
 4: /node_modules
 5: 
 6: # next.js
 7: /.next/
 8: /out/
 9: 
10: # production
11: /build
12: 
13: # debug
14: npm-debug.log*
15: yarn-debug.log*
16: yarn-error.log*
17: .pnpm-debug.log*
18: 
19: # env files
20: .env*
21: 
22: # vercel
23: .vercel
24: 
25: # typescript
26: *.tsbuildinfo
27: next-env.d.ts
</file>

<file path="components.json">
 1: {
 2:   "$schema": "https://ui.shadcn.com/schema.json",
 3:   "style": "default",
 4:   "rsc": true,
 5:   "tsx": true,
 6:   "tailwind": {
 7:     "config": "tailwind.config.ts",
 8:     "css": "app/globals.css",
 9:     "baseColor": "neutral",
10:     "cssVariables": true,
11:     "prefix": ""
12:   },
13:   "aliases": {
14:     "components": "@/components",
15:     "utils": "@/lib/utils",
16:     "ui": "@/components/ui",
17:     "lib": "@/lib",
18:     "hooks": "@/hooks"
19:   },
20:   "iconLibrary": "lucide"
21: }
</file>

<file path="mise.toml">
1: [tools]
2: pnpm = "latest"
</file>

<file path="next.config.mjs">
 1: /** @type {import('next').NextConfig} */
 2: const nextConfig = {
 3:   eslint: {
 4:     ignoreDuringBuilds: true,
 5:   },
 6:   typescript: {
 7:     ignoreBuildErrors: true,
 8:   },
 9:   images: {
10:     unoptimized: true,
11:   },
12: }
13: 
14: export default nextConfig
</file>

<file path="package.json">
 1: {
 2:   "name": "my-v0-project",
 3:   "version": "0.1.0",
 4:   "private": true,
 5:   "scripts": {
 6:     "dev": "next dev",
 7:     "build": "next build",
 8:     "start": "next start",
 9:     "lint": "next lint"
10:   },
11:   "dependencies": {
12:     "@hookform/resolvers": "^3.9.1",
13:     "@radix-ui/react-accordion": "1.2.2",
14:     "@radix-ui/react-alert-dialog": "1.1.4",
15:     "@radix-ui/react-aspect-ratio": "1.1.1",
16:     "@radix-ui/react-avatar": "1.1.2",
17:     "@radix-ui/react-checkbox": "1.1.3",
18:     "@radix-ui/react-collapsible": "1.1.2",
19:     "@radix-ui/react-context-menu": "2.2.4",
20:     "@radix-ui/react-dialog": "1.1.4",
21:     "@radix-ui/react-dropdown-menu": "2.1.4",
22:     "@radix-ui/react-hover-card": "1.1.4",
23:     "@radix-ui/react-label": "2.1.1",
24:     "@radix-ui/react-menubar": "1.1.4",
25:     "@radix-ui/react-navigation-menu": "1.2.3",
26:     "@radix-ui/react-popover": "1.1.4",
27:     "@radix-ui/react-progress": "1.1.1",
28:     "@radix-ui/react-radio-group": "1.2.2",
29:     "@radix-ui/react-scroll-area": "1.2.2",
30:     "@radix-ui/react-select": "2.1.4",
31:     "@radix-ui/react-separator": "1.1.1",
32:     "@radix-ui/react-slider": "1.2.2",
33:     "@radix-ui/react-slot": "1.1.1",
34:     "@radix-ui/react-switch": "1.1.2",
35:     "@radix-ui/react-tabs": "1.1.2",
36:     "@radix-ui/react-toast": "1.2.4",
37:     "@radix-ui/react-toggle": "1.1.1",
38:     "@radix-ui/react-toggle-group": "1.1.1",
39:     "@radix-ui/react-tooltip": "1.1.6",
40:     "autoprefixer": "^10.4.20",
41:     "class-variance-authority": "^0.7.1",
42:     "clsx": "^2.1.1",
43:     "cmdk": "1.0.4",
44:     "date-fns": "4.1.0",
45:     "embla-carousel-react": "8.5.1",
46:     "input-otp": "1.4.1",
47:     "lucide-react": "^0.454.0",
48:     "next": "15.2.4",
49:     "next-themes": "^0.4.4",
50:     "react": "^19",
51:     "react-day-picker": "8.10.1",
52:     "react-dom": "^19",
53:     "react-hook-form": "^7.54.1",
54:     "react-resizable-panels": "^2.1.7",
55:     "recharts": "2.15.0",
56:     "sonner": "^1.7.1",
57:     "tailwind-merge": "^2.5.5",
58:     "tailwindcss-animate": "^1.0.7",
59:     "vaul": "^0.9.6",
60:     "zod": "^3.24.1"
61:   },
62:   "devDependencies": {
63:     "@types/node": "^22",
64:     "@types/react": "^19",
65:     "@types/react-dom": "^19",
66:     "postcss": "^8",
67:     "tailwindcss": "^3.4.17",
68:     "typescript": "^5"
69:   }
70: }
</file>

<file path="postcss.config.mjs">
1: /** @type {import('postcss-load-config').Config} */
2: const config = {
3:   plugins: {
4:     tailwindcss: {},
5:   },
6: };
7: 
8: export default config;
</file>

<file path="tailwind.config.ts">
 1: import type { Config } from "tailwindcss";
 2: const config: Config = {
 3:     darkMode: ["class"],
 4:     content: [
 5:     "./pages/**/*.{js,ts,jsx,tsx,mdx}",
 6:     "./components/**/*.{js,ts,jsx,tsx,mdx}",
 7:     "./app/**/*.{js,ts,jsx,tsx,mdx}",
 8:     "*.{js,ts,jsx,tsx,mdx}"
 9:   ],
10:   theme: {
11:   	extend: {
12:   		colors: {
13:   			background: 'hsl(var(--background))',
14:   			foreground: 'hsl(var(--foreground))',
15:   			card: {
16:   				DEFAULT: 'hsl(var(--card))',
17:   				foreground: 'hsl(var(--card-foreground))'
18:   			},
19:   			popover: {
20:   				DEFAULT: 'hsl(var(--popover))',
21:   				foreground: 'hsl(var(--popover-foreground))'
22:   			},
23:   			primary: {
24:   				DEFAULT: 'hsl(var(--primary))',
25:   				foreground: 'hsl(var(--primary-foreground))'
26:   			},
27:   			secondary: {
28:   				DEFAULT: 'hsl(var(--secondary))',
29:   				foreground: 'hsl(var(--secondary-foreground))'
30:   			},
31:   			muted: {
32:   				DEFAULT: 'hsl(var(--muted))',
33:   				foreground: 'hsl(var(--muted-foreground))'
34:   			},
35:   			accent: {
36:   				DEFAULT: 'hsl(var(--accent))',
37:   				foreground: 'hsl(var(--accent-foreground))'
38:   			},
39:   			destructive: {
40:   				DEFAULT: 'hsl(var(--destructive))',
41:   				foreground: 'hsl(var(--destructive-foreground))'
42:   			},
43:   			border: 'hsl(var(--border))',
44:   			input: 'hsl(var(--input))',
45:   			ring: 'hsl(var(--ring))',
46:   			chart: {
47:   				'1': 'hsl(var(--chart-1))',
48:   				'2': 'hsl(var(--chart-2))',
49:   				'3': 'hsl(var(--chart-3))',
50:   				'4': 'hsl(var(--chart-4))',
51:   				'5': 'hsl(var(--chart-5))'
52:   			},
53:   			sidebar: {
54:   				DEFAULT: 'hsl(var(--sidebar-background))',
55:   				foreground: 'hsl(var(--sidebar-foreground))',
56:   				primary: 'hsl(var(--sidebar-primary))',
57:   				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
58:   				accent: 'hsl(var(--sidebar-accent))',
59:   				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
60:   				border: 'hsl(var(--sidebar-border))',
61:   				ring: 'hsl(var(--sidebar-ring))'
62:   			}
63:   		},
64:   		borderRadius: {
65:   			lg: 'var(--radius)',
66:   			md: 'calc(var(--radius) - 2px)',
67:   			sm: 'calc(var(--radius) - 4px)'
68:   		},
69:   		keyframes: {
70:   			'accordion-down': {
71:   				from: {
72:   					height: '0'
73:   				},
74:   				to: {
75:   					height: 'var(--radix-accordion-content-height)'
76:   				}
77:   			},
78:   			'accordion-up': {
79:   				from: {
80:   					height: 'var(--radix-accordion-content-height)'
81:   				},
82:   				to: {
83:   					height: '0'
84:   				}
85:   			}
86:   		},
87:   		animation: {
88:   			'accordion-down': 'accordion-down 0.2s ease-out',
89:   			'accordion-up': 'accordion-up 0.2s ease-out'
90:   		}
91:   	}
92:   },
93:   plugins: [require("tailwindcss-animate")],
94: };
95: export default config;
</file>

<file path="tsconfig.json">
 1: {
 2:   "compilerOptions": {
 3:     "lib": ["dom", "dom.iterable", "esnext"],
 4:     "allowJs": true,
 5:     "target": "ES6",
 6:     "skipLibCheck": true,
 7:     "strict": true,
 8:     "noEmit": true,
 9:     "esModuleInterop": true,
10:     "module": "esnext",
11:     "moduleResolution": "bundler",
12:     "resolveJsonModule": true,
13:     "isolatedModules": true,
14:     "jsx": "preserve",
15:     "incremental": true,
16:     "plugins": [
17:       {
18:         "name": "next"
19:       }
20:     ],
21:     "paths": {
22:       "@/*": ["./*"]
23:     }
24:   },
25:   "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
26:   "exclude": ["node_modules"]
27: }
</file>

</files>
